%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2009.i105.034.P.m005.c33.isometric dj party set-10.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/25/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 10 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2009.i105.034.P.m005.c33.isometric dj party set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-02-25T23:32:11+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-02-25T23:32:11+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-02-25T23:32:11+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwLzH+YvlPylc6hrP&#xA;mO7aBVnTTrOFFaWQgIJG4xpXYtUljt0Fa0GUYzc5Hu2c3NExxQA5H1H7mZWOq6ffLGbWX1PVhjuU&#xA;FGUmKUVRqMARXwO+WiQunFOOQHFWyLyTB2KuxV2KuxV2KuxVjX5k+a7/AMp+StS1/T9POq3tmIhb&#xA;2AYp6jTTJCKsAxovqcj8sBkALLKMTI0ObHfLP5haj5n8p2D6lZvoOuag6LNZxSl3SMyU5K/FSjMo&#xA;6UqtfHNRqu1ICQxxvjMgPgXaYNBOHrmPSATv+l6OBQADoNt9/wBebh1LsVdirsVdirsVdiqA1jXN&#xA;N0e2Fxfy+mjHiigFmZqVoAMtw4ZZDUUgPG/Puqec/M3mnRNR8reYLjQ9H0uRPrVkKp9YkL8mM/Fy&#xA;jR+mtArgjr44dTp54pRiRfGa26OVg0wnGRJrh3970fyx57Gq3y6be2UllfSJ6kNQeEiU5AitCPh3&#xA;y/UaTgHFE2HGMWWZhMXYq7FXYq7FXYq7FWJeefzK8ueVLOdbi6jfVvTJtLEcnZnIonPj9hK/aJPT&#xA;pvluLDKf09GrLmjjri2tiX5KfmT5o1iG60rzs8D62twzWt3ZoBbvFIOaw8l2Lx7/AOx41+Lc4/GK&#xA;BP8AFdfBzDpp3KqPBV0e961k2h2Kvmr86dL061/N611i5lSVYore4MMiiWKMq3R4+taxctj0OYmY&#xA;mJIHV7jsbs/HqdKMkgeLHxRH337xe3ue+aHBqcs7anqH1dWngijijtiWUKpZ68twa8uxIy3HGV3K&#xA;nk9RPGBwQugSd05y5w3Yq7FXYq7FXYq7FWAea7rULyW5Zx/oFrOLZoa9C1QHYd+RH45xnambNllO&#xA;XKGOVV+l6Ts/HCAiP45Ru/0Jr5AmgTT5rJNnjk9QL/ksoX/jXNn7P5+OEwfq4r+Y/Y4fbEDxiXSq&#xA;ZVnQOndirsVdirsVdirsVQOtaNZavYtaXSnifijkXZ0cdGU+OW4s0scrCQaeF6tf2/6Q1CdrxJVW&#xA;eSKa6DAI7RN6bNUGlDwrm67PGQYv3leXucjPkxbShtGuve9q8taPo9pYwXdjbLHJdRLI0rCspVxz&#xA;CljvQV6ZoBAQuI5W15tRLKeKR6Jxi1OxV2KuxV2KuxVQv5LyKzlezhFxdAfuomYICSabk+HXIzJA&#xA;25tmIRMgJGovHvzu8kwQflyuprCsuq6fcxXN/e0rKySlo5Ry68A8qtT2rmT2aPDlXfz97j9sT8YW&#xA;BtHl5BZ/zjj9TudKvIbiAfW9On9a1lbr6d0gU0X/ACWhO/8AlZd2hhHGJ+TT2blyRwmHKJL2vMJy&#xA;nYq+eP8AnJLyN5h1fXrfUvLDPLeJYO2p2KMFJigLMsq12LcSwI6mi0qciMmPj4ZDfm7fR59Tjwk4&#xA;5mMLqr5k9z0/8kZ9Tm/Kry4dTSSO8itmgdJgRIFgleKOoO/92i9cmSCbjydbmjISIlfF5s4wNTsV&#xA;dirsVdirsVdiqVz6FBcXl689Hs76KNJoNwTJGT8fIUI2pSmYktFjlKRI2mBfnTlx1coxiB9UCaPv&#xA;fOvmHTdf8n+f9Vj0nV5F+pQG+iu5XJkdGVG9KXiCrFmYKOS0O1aZAYhjNR2p7/S6qOp0kPFgJRme&#xA;GvPvH39/N9BeSNW1PV/KemanqcaxXt3CJJFT7JBJ4OB25pRqe+ZkCSLLwnamnhh1E8eM3GJ/tHwO&#xA;yeZJwHYq7FXYq7FXYqw/8z/PUflPQKwo0+s6kWttJto92MxFPUI3PGPkOg3JA75fgxccvIOPqM3h&#xA;x8zyeN+aPyih8t/lCuq3ygeYUu7e4umZqskcrGAQKe5/fB39x4AZmw1PFlofS6/JpeHESfqe9+S3&#xA;kfydoLyrxkbTrQupqCGMCVG+a/L9Z95dph+iPuCc5W2OxV2KuxV2KuxV2KqN4to1nOt4ENoY3FwJ&#xA;KcDGVPPlXbjx64Y3e3NXiX5VX+k6f+Y17a6cZv0LfrNbaZNKpUOYykoWprXgKqK70Iruc2uqjKWL&#xA;f6o82R5Pc81LF2KsJ1611SNPMmoXMMcMEscNtZylwXZAVDUoaKrFv2qGvtQ5h5oECUj1d3pp4z4U&#xA;Ikkgkn8d7KNCSxj0e0isZo7i2hjESTQsHRjH8DEMpI+0pr75k4wBEAOr1RmckjMESJuj5o7JtDsV&#xA;dirsVdirsVdirsVfOH5h3tnJ+ZPnDy3DcRnzRrFpZpotvcepHHKQ1rO0ZlRJAhKQlVLUUkUJGUHG&#xA;TIvWYu2ceDS6fhqU8cpEx/0w/wB9b2n8uLvXp/J+nx69o0mhapZxraT2LyxTKfQUIJI3hZwUem1d&#xA;x+JuAp5fNlOScpnnIk/Nk2FrdirsVdirsVdirE/N/kIeY/MnlbWv0jJZHy1dSXX1dEDi4EgQemzF&#xA;hxH7sdjhBIQYgsQ/5yXv7ey8maRJeeoumSa1axahJGpb04njlHN6dFBp9NMu0+UQNnuaNThOSIA7&#xA;3rMcccUaxxqFjQBUUbAACgAyhyAuxV2KuxV2KuxV2KuxVJfOehX2veV9Q0ixvf0dd3cYSK8KeqEI&#xA;YNRkqnJWA4tv0OShMxII6K891jyx5p0D8vtA1Cazj1LzF5Tk9R7TRYpJPrUbyrz9KIqHMj8VaT/Z&#xA;H2zJxajeXH/EEgvTPL+sDWtGtdUFndaet2nqLZ38fo3KCpA9SOrcSQK0rmIhMMVUbyysr62e1vbe&#xA;O6tpKepBMiyRtxIYVVgQaEVwEWzx5ZY5cUCYyHUbFdbWttawJb20SQQRikcMShEUeAVaAYQETnKZ&#xA;4pGyepVMWLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVU5rm2haNZpUjaZuEKuwUu1K8VB6n2GKpbruujSbjTfWCraXtwtpJMx&#xA;IKyS7RAf6zZXOZBHcXL0ulOYTr6ox4vgOabZY4jsVdirsVdirsVdiqC1e/ksrIyQoJbmRlhtomNA&#xA;0sh4qCdtu59shknwjbm3afEJyo7R5n3BVtL+zuXlhhuYZri2IS7jidXMb0+y4BJU+xybUURih2Ku&#xA;xV2KuxV2KuxVa8kaFQ7BS54oCQOTUJoPE0BwWkAldhQgl1B21h7BIqxxQCaWev2WdiqJTxIUnIcf&#xA;qrybjiAx8d8zVfpRuTaXYq7FXYq7FXYq7FXYqgZdSMep21pwDQ3CyATBq0ljAb0yP9WpyBnUgO9u&#xA;jiBgZXvGtvJHZNpdirxf/nKfRNI1vyNY2F3M0N+L1Z7BlUsPgUrNyFVX7D9++V5J8LuOx+ypayZi&#xA;DUQNz3JfpF/+YH5qRXFm19a2Gl2ckD3NIvj5blGQ0ZiwKEn41+7KQZZHqM+HR9kcMuGU8kga3+d9&#xA;OvcXvCghQCakDc+OZT5+XYq7FXYq7FXYq7FUh84GWGytb6P7VjdJMQfs7hk+IfNxms7VzTxYhOH8&#xA;Mg7Ds0CUzA/xRI/S8k/Jv8u08g3d1eWNzdalc6tPBBfXLryTgJuRLIK8SVbYknvue1Wm7TOaXpj6&#xA;dt/0OTk0GOA3O/CTv310e85uHTOxV2KuxV2KuxV2KoDWbC4u7ZDaSCK9tnE1rI32OYBWjgfssrFT&#xA;88ryQJG3MN+nyiEvULidi+bfzw8w+bJvP2mXMGpyaNd+WY4ZW0qOWUxXEzTrIWJQqpV4SK9dhTxp&#xA;fp8OTJVit/wWnV5cGInhnxVEECut8vhzfR+g2K21l6xuPrk94RPNd7UkLKOJWnRQtOIyjHj4efPq&#xA;3Z84yEUKiOQTLLGh2KuxV2KuxV2KuxVItR1KXTJbsX/rHTrr4obyAFjB8ARkag+HcclbxOUSycBN&#xA;8nNx4BliBCuMcx3+YfP3/OOfk3X/ACv5iv7K/vBcw397FPbNE7Mri2jn5zMGAIaRZR7+PbM7PoJi&#xA;AnYoG/x82GKQgJg8zGvtfT2UOKoX1rJc2zQx3Els7EETRU5ChrtUEb5GUbFXTZimIysgS97xD87f&#xA;LXmuHRE1bV9Zi1CwsJglqggWGUG5dF+MJ8LUC9evtvlfgTnsN3rOyu3dFpv4Di4q4jZkNr+KK/5x&#xA;qleWLzAyGtuGtVVqbFx6vIA+wpXLY6aeIerq4PtD21ptdOPgky4Ls1QN9179HtmF512KuxV2KuxV&#xA;2KuxVhn5t6+uh+UTeyRPLb/WYI51jFSFZ9juQPtBeuY2s0M9VjOOJESe9uwayOml4kgSPJjX5Lfm&#xA;BY67qOq6Pa27Qwwol3bl6cmJb05qgE0p+7puepwaHsrJo8VTkJEnox1HasdXkuIIodXrGZTW7FXY&#xA;q7FXYq7FXYq7FXyn+dtxcXv5p6oZIFMdjHbW8avUclWIS0b/AFmkNKdsysWuhjgYm7c3F7KarWGO&#xA;TGY+Ge88vsfU1lPBcWcE9uKW8saSQilPgZQV2+WYt24k4GJMTzGytixdirsVdirsVdirsVYT+cfm&#xA;S68v+Q729tgRJK8VuzilVjkceqRUHcxhlHgTXMnSRByC2nPl8ONsU/Iu+t9avdQ1G3hdILOJIA0q&#xA;0IlkYlglK/ZWP4vmPE5ndo5riAE4tSMnIHZ7DmobXYqwb86tCfWPy51RIwTNZBb6MDwtm5yfP93y&#xA;zI0s+HIHG1cOLGWHf843al658zW/prCr3EV7HCteK/WfUJVfZQqgZfro1wuN2fO+L4PaswHZOxV2&#xA;KuxV2KuxV2KsD/O64Rfy+vLH6ubq41SWCys4VNCZ3kDxkDqSpjqAOuZGlHrvucXWSrGR37Mb/KXy&#xA;lcaR581h7hooZbHTLKwkgj3EsxggaaUHb+7eLiadS2+T1GojMUDvZK6fRZMZ45RIjQAPQvYMxHKd&#xA;irsVdirsVdirsVU7m5t7WB7i4kEUMY5O7bADBKQAssoQMjQFkvDPOvkXUvNPmM+YoomsbTUZILWF&#xA;JQC8jKvBXA2Kgoteh+ea7JOUjYGx5PcdldqQ0eI4ieIxBJ8nt+nWa2Wn2tmrF1tokhVj1IjULU/d&#xA;mxiKFPE5snHMyP8AESfmiMLW7FXYq7FXYq7FXYq84/Nm1k1vWPKPlMAPbanftdahHWlbayUPIG9m&#xA;VyPnTMrTnhEpdw+9xNSOKUY95v5LvyjsZtKv/OWjleFva6zLNbp3EdwodP8Aknwx1BsRPkulFGQ/&#xA;pPRcxXLdiqR+dPKNn5t8vz6JeXt7YQXBUtcadObecce3KjKynurKQfDEFSGMfln+Ur+Rdc1q6h1i&#xA;TUdN1GG1htbe4jUTxfV/ULF5EKo3NpT9mNe3hk55JS5lrhijD6Q9DyDY7FXYq7FXYq7FXYqlGveX&#xA;k1a60q5Moik0u7W6QMnqBqAhgByXixBoG3p4YDfQ03YpwAInHi228j0P7Ef+j7D66L/6tF9eCGIX&#xA;XBfV4Eg8edOVNumNDmx8afBwWeDnXS/ciMLW7FXYq7FXYq7FXYqlHmny8mvaWLP1zazxypPbXSqH&#xA;McidG4tsdiR9OQyQEhTmaHWfl8nFXECKI5WF2t6CmqrYlriS3nsLiO5jnioGJTZlINRRx1xlASry&#xA;RptX4XFsJCcSKP46Jrk3EdirsVdirsVdirsVdiqTP5edvOEfmE3IKR2DWC2ZiUkF5hKZRLXkK8Qp&#xA;WmO/fs3ccPD4eEcV3xda7lXSPLel6Te6ld2SFJNVm+s3YJBBlpuw2ruTXc/hgApObOcgFgXEVdbm&#xA;thffQAA8k0wtDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirSujFlVgWQ0cA1INK0P0HFNN4odirsVdirsVdirsVdi&#xA;rQZSWAIJU0YDsaVofoOKt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUu1zzD&#xA;omhWZvNXvI7O36KXNWY+CItXc+yg4CQObkabS5M8uDHEyk8R86fnvq+pc7Ly5G2m2bfCbtqG6cEU&#xA;+GlVi69qt3BGY08/c9z2Z7JwhU9QeI/zRy+Pf93vYl5X0DzJfapDdw3VxZzXFxHGb2Mymb1LgtxZ&#xA;jH8YDlH+NqLsakYMeKct3YdqdraTTw8MxjOv4KFfqD6I/LxtUfyjYSanJM95IpeRbmQTSoT+w0gA&#xA;508d/mRTMuq2u3zXU5o5JmUYiAPQcmSYtDsVdirsVdirsVYR+ZHnuXQEXT7AqNSntZroytQ+jFEV&#xA;XkFYFeTFjxLAgcdwemUZs3BXm7jsrswaizI1GxH4n9XX72EfkLZXPlvTprqZLt9I1yZFhnnI4rMh&#xA;ZeYUdpOfFpNuRUbbZXHIRIk/TI7N3aHZccXoEhLLAWQPxze3ZluhdirsVdirsVdirsVYp+ZerG08&#xA;sXdhE0kVzq0E9nBcxni0DSRFPWBH7SFgQKiviMytLpjlJ3qkgW87/InUbLyR5Uj0HzPrnO5kn5Qy&#xA;zu31WMysFWKKSQLx5H4iKUrU13ynPj8OQieZbjgPDxDkHt+VtDsVdirsVdirsVdirsVdiqld3lrZ&#xA;273N3MkFvGKySyMFUD3JwxiSaCse0T8xvK+taw2k6fO73AVmjdkKxycN2CE7kgb7jMjJpZwjxFNP&#xA;k7z7521a9/MrzBYXKz3z2+p3lpaKC0rLFFcOqIinoqgdBmPLRSnuC9d2T7RY9PjEDCvMdfM8vvZ1&#xA;5f8AJ15JcoqRxxGIQzS3UhWZXjljJeIRkLxZSdmJPyy7S6CNCUt/Jq7U9pcuYmOI8EPtP6vxuyeG&#xA;O88qBbjTXb6wyxxS3TH1JZhEKIJnIq9ATTlm3hhhIUQ8xzZ55B852U8NhodwrR6g8XwHbizoheRR&#xA;SlOIBpmuzaKUI8XRiQzrMJDsVdirsVdirsVfO/5lXVhd/mlq02pX31bT9Ps0sXorzF1aESGJIowz&#xA;szS3AX4fsmpPQ5lT08ZYLP1Xt+O5ztHrJ4TsTw9R+n39zH4fzI12Dy5F5Y0jUII9OtTG5e5iaK5C&#xA;euoMLrMAVUurLsOVe9BlE5xyD1R4dvh7+iJGsnHGXEe88/i9Q/Jfzd511XUL3Tdfka6sY7KC8028&#xA;ng+rzvHK7oGIr8aPwPFiK7b9cEq6fj8fi+bjZAL5vWMi1uxV2KuxV2KuxV5b+dnmKx02TSbS7cxr&#xA;Ms8ytSoJj4Cm3f4s2vZlDiJa5aiMCBLa3mFtps3mSzF/Z2c+pTWFmL2V9PKGeOG9uLu3ESRsfjb/&#xA;AHH1PHfde3LMLtHJllMgEcLsdNnwSAMrvvCj5Y/OLzvoV9HY2ET6lpscoFzBexsrJEHSIqhSV/Rp&#xA;XqVpUk8TlINjer8vx99NWWAs8O0fN9T5Fx3Yq7FXYq7FXYqlmveZ/L3l+1F1reo2+nQvURtcSKhc&#xA;qKlY1J5O3soJyUYkmgrDfM35x6VZ26HRYzqHqmguyKQKepFKhy1OxpmTptOJzMJGiOnWu/3eYts8&#xA;IgWeTCb9df8AOcixh5L65cB4FrxjTp8VBREHif45uuHFhjfJdg9A8hflZZeXJo9SvZfrWrqCEZKi&#xA;GLkCrcBsWPEkVP3Zp9TrDk2G0WJL5r8u+d/LWrarfXk1vHpet6pcy3N3yPwSyzyGRgkrbgcmNEbp&#xA;2rmy02SAFciyelte3VpKssUyxQmCES1oQSEA36UO+S0uP92LQAhhqeta5dLp+j2z3U7GvwLsO3I1&#xA;2A92NMtlKMBZ2S9I8hflbNo2oQ65q92ZtUjDenBGaxpzQoeTHdjxY9KAe+anVa3jHCBsxJei5r2L&#xA;sVdirsVdiqH1G8Wx0+6vWQyLaxSTFF6sI1LUHuaYhXz7ovkbR/O8Hl2/vr1rqfzO2p3819A3xBYO&#xA;CrQNUUE1Ay+B47UzL1GUWBDlFnxU7yR+TGr6laW+sSSabe6VruhTRVuIminsr2dCIpIYolMDqKip&#xA;opr8Q+LrjSkTzTLIS9fsNNu7Xz6knoubb9BQ20t0Fb02lguGKpy+zypIxp1pkWtleKuxV2KuxV2K&#xA;uxV45528sReffzci0K8kaHTND003EzxEczLMQFXeoFeanp+zmbjmceKxzJcDJAZM3CeQC7/nHXT1&#xA;tLfzR9WKzaauoC3s7woFklEKkmvfjxkVgtaAs3icdadx30ugGx7r2RPm61UL+ZksESidYNNnPFfi&#xA;cwxeoAabmvCmYTnvWMVdirsVdirsVdir4z/5yptteT80pp79ZP0bLbQDSHavp+ksYEqqelRPzJHu&#xA;PHMvDXCziy3/AJx38iar5k8tzSauJYNDWTjbSEUaYIQQIi3ZSWXlT2GSy5ADCQ+uF/Ijl86PwZjJ&#xA;USO99JaTo2maRZraadbrbwL2XcmndmNWY/M5i5Mspm5G2m0bkFeafmV+QXknzuJbv0v0TrrbjU7V&#xA;QObf8XxbLL89m/ysshlISCxXyJ/zj/rtlbrY+ZtTWSzs5HWD6s7O0sZNVp6gHpCm1KHw8DmcNfww&#xA;oc08T2fRtC0nRbQWmmWqW0A3IUfEx8XY1Zj7k5gZMkpm5G2KOyCuxV2KuxV2KuxVxAIodweoxVJ4&#xA;fKWiW2oabeWNutiulxXUNraWqRxW/G8aNpSY1Ub1hBFKdTWuKqfkbR7zRfJ+kaTe8frdlbRwzcDy&#xA;XkgoaHaoxVPMVdirsVdirsVdirsVSVfKWi2+t6n5hs7YR69qkC2894zyGqxqFQKCWWMfCvLgBXiK&#xA;1Iw8RRwhjn5N+T/NvlLyzJpHmN9NeQTtLbtpnrmok3YzPOE5N0C8UGw75PLlM5WWvDiGOPCGYWWj&#xA;adZ6hqGoW8fG71R45L2SpPNoYlhTY9KIo6ZW2o3FXYq7FXYq7FXYqoXlhY3sYivLeK5jB5BJkWRQ&#xA;elaMDvjaq0caRoscahI0AVEUUAA2AAHbFW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY550/MLyp5Ns0uN&#xA;dvBC8tfq9pGDJPLTrwjG9P8AKNF98VY/5K/Pj8vPNuojS7S6ksNTc0t7K/CRPNX/AH2UeRGO/wBn&#xA;lyPYYq9DxV2KuxV2KuxV2KtMyopZyFVRVmJoAB44gKw3XvzL02ycwacgvpgaPJXjEPGjdW+jb3zY&#xA;4OzpS3l6R9rIRTTy/wCddG1kLGj/AFe8PW2lIBJ/yG6N+v2ynPo549+Y70EJ/mIh2KuxV2KuxV2K&#xA;uxV2KuxVR+vWX1oWn1iL60QSLfmvqUABJ4Vr3xpNHmrYodirsVdirsVdirsVQ2oalYafbm4vZ0gi&#xA;H7TnqfADqT7DJ48cpmoiyrC5vzXs11AJFZu9gNmlJAkP+Uq9KexObIdlnh3PqZcLMNK1rTNVt/Xs&#xA;Z1lX9tejqfBlO4zX5cMsZqQQQp+Ytcs9B0K/1m9P+jafA88iggFuAqEWtByc/CvucqQ+YPIXkvXP&#xA;zk85X/mTzJO6aJBMBdmMsC5PxJZW5qSiIhHJq1AIp8TcgqxX84vzO8p3/l+bypoXkmLRbSyuYrnQ&#xA;9chnjjmBjcr68kMcXMCaMn7UtakManJmBHNX1n+WHmX/ABN+X3l/W2l9a4u7KH66/Q/WkUJcAj2m&#xA;VhkSKVk+BXYq7FXYq7FWO/mNcPb+QvMFwn24bC4kXem6Rlhv26ZZh+sMoGpAkW+crDz/AKVeXf1c&#xA;xNayNxpA7c6FhULHJRfU28QG8Rm90+oJsS+H497YaDIo7+0NqL1J0+rBfU+scgECgV5cj0FN8y+I&#xA;EX0Qyf8AKb84h5i83N5UgmN/BDay3DXzjoYmRQiMd3Hx9SPkTmj1scfOA3+xhIPZs17F2KuxV2Ku&#xA;xV2KoPVda0nSbZrnUruK0hUE8pWCk0FSFHVj7DfCASrxD8zPzj1PVbZtK8mXz6W3MrJfKge6mFBx&#xA;W3Ujgpcn4Pi5t4LtysjEA7/j4MxGwS8AuNX83s+oG6GpzXsMqS2uoQXfoG2lRiJWaoEgqAoI9skR&#xA;kvY8/tUykRR6fY+i/wDnH/8ANXzJ5hnTy9rbfXHgsmnj1J6eq/pyKgDGo9ReLf3vH7Q6schk4RsN&#xA;5da5D9vkkwIFvb8ra3Yq7FXYq7FWEfmX+ZuneS2021uGSK61f1xaTTEiFTb+ny5Edz6wpUgZlaXD&#xA;GcvUaCQLeZa9qF1rIM+pXkjFT6qTCQoIyAaFaUUChO1KeOb6OGERsKbKYYPOcstxBp2lyRanPc3k&#xA;FhBfBW4hpuVS0aU9Vl4f7rI5E7UynLquCJI9SvSv+cf5Lr/E3myCe9mvfRSxoZ1EZjaSIu8YRfhX&#xA;izEUoD/NvXNRnzSyQEpc2Mkb/wA5L6zfp5KGiadC8730scmo8F5enaxNzU+ILzInGnWjZTjwymLD&#xA;EBjP/OMH5oQSR/8AKutTsY7DUrWKS9025hJKXkUjmVy1Sf3ih67GhUdF45GeMxNFBDzf86vyd1bR&#xA;NanmhtribTZFdbGS3t5Z1li39KEtEjcJlWkZ50DU5DuBcTGYBJogV70vof8A5x88oan5V/KvSbDV&#xA;Y5INTuA13d20uzQmWgSPiQCpEaryU9GrlEpWh6PkVdirsVdirsVYx+aIJ/LjzMBuTpl1Qf8APJss&#xA;w/UEh8u6T5vv7XyX5Zto7lF8sG0uoNSspIPWt5r+OeaRorgL8fKSJ4eLqeSggrQiuVaqc4SuIvk2&#xA;wiCdzTEPPQu7Ga/0kSySaZ/od7ppm3lFrdw/WIFdqDkyxzBWam5Htmzx5OKDFmP/ADiZ/wCTSl/7&#xA;Zlx/yciyjP8ASiT7HzEYOxV2KuxV2KsA/Ovz3rXk7ynHd6JFG+p3twLS3eZeax8kZi6oCDI44/Cg&#xA;rXwNKYQQOfL8c/JlCBlyfKGt/mB5u1p7xdbvtSvuVu/1a409I/TN2hBjMikpSMcm5ArVa0AGXTjM&#xA;EV8wy4jXD0V/L2so1i0eoWL3+qOfQV5OKlFoOMTxhWiqzjZVBfwU13jmiAASanfLr+z8W2wlIxrp&#xA;+Ob1LyZ/zj5revzR6j5oB0nTRT6vYkc5xFUkRxxS+oIUFTQy8m/yEO+VmRPkO4fpP6vmWHEI8tz3&#xA;vf8Ay15T8v8AlqyNno1mltG5DTybvLM425zSsS8je7E4PJqJJNlNsUOxV2KuxV2Kvmj/AJzO/wCm&#xA;P/7eX/YrmRp+rKLyb8vpp7yXS7C9kln0lLm5aaFgZoYwluDE7xF4w6RzMrcK/EdgCxAN+fIRiPq4&#xA;QzHPvZBLY2A1+We8n0+W2urj69p0pdYbOV2tbhrcSNPHbojeovxepGq8xuOJyMiTg9PNAe3fkBe6&#xA;jfy6pc3Mk97DDBBbJqsrSSxzP6087JDPIA0iQiYJXpUEjYjMfgMcYEubGT1HVrZGt7lmtGvoriH0&#xA;Li1ThydByoBzKL+2e+CB3G9MXz9+XX5JeebD82tF8xajZfo7StGS8kaczQO0puFkjjgjWKSRgB6p&#xA;ZuSgUqBl+ryxmRwspF9JZiMXYq7FXYq7FXYq7FWmVXUqwDKwoyncEHscVeb+Y/yY0ppLu+8rLa6b&#xA;d3dGvNMuoFudKumSpRpbY/3bqTtJHQj6Tl3iCW09/vTb5m/MTyb+aD+aL5fMGlPLrGpywR2a2MXK&#xA;CVYlMcaWwjBHFI1Ap1A65lw4RDbkzD2f/nHr8i/Mfk/VW80eYJo7e7ntXt4tKj/eOiysrFpZAeIY&#xA;cPsrXr17Zi5cgOwYkve8oYuxV2KuxV2KofUNPsNRs5bLULaK7s51KTW86LJG6nsysCDiCrxnzb/z&#xA;jNpd/qS3fl/UP0fFIw+sW1wJZQq/8VyRyRSsoHRJGb/JZRthiTH6SY+78bNoy94tnnkX8qPKXk+K&#xA;N7K3FzqaLxOpTqpkHL7QhVQEhU91jAr+1yO+ACuTGUzLmzLFg7FXYq7FXYq7FXYq8i/5yG/KPXfz&#xA;A03S59EniF9o31krZzfAJxcelULJ0Vl9HbkKGvUZbimI80gvA/IvlLzvY39z5fby3fXGozmW3ubZ&#xA;JPqUkC87aaOf6wySoqc7cDlSjCtDXfMjLCOTHR+m2YlW4e9+T/yA0mONLzzkIdTvvUjli0+HkLKB&#xA;YY/ThiAcl5RGm1WO/VuR3ys5+GPDHkxMnrcEEMEKQwRrFDGAscaAKqgdAANgMxybYv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:cda55811-fe8f-dc48-9134-7af54c899a05</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:cda55811-fe8f-dc48-9134-7af54c899a05</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:80488c1b-6aab-4eec-af1f-3060c75db0cd</stRef:instanceID>
            <stRef:documentID>xmp.did:90989bf3-87bb-6247-9a63-d5500dcc53a6</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:354de900-3fa2-f140-887a-d6ffb222a3e3</stEvt:instanceID>
                  <stEvt:when>2020-09-25T19:23:19+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ab723af2-c640-d94b-9347-7c949cc607ac</stEvt:instanceID>
                  <stEvt:when>2020-09-27T21:26:36+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:90989bf3-87bb-6247-9a63-d5500dcc53a6</stEvt:instanceID>
                  <stEvt:when>2021-02-25T22:50:16+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cda55811-fe8f-dc48-9134-7af54c899a05</stEvt:instanceID>
                  <stEvt:when>2021-02-25T23:32:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
206.167 278.588 mo
208.463 390.162 li
208.463 390.772 208.867 391.383 209.674 391.849 cv
211.288 392.781 213.904 392.781 215.518 391.849 cv
216.325 391.383 216.728 390.772 216.728 390.162 cv
214.432 278.588 li
206.167 278.588 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
166.33 250.83 mo
160.59 362.405 li
160.59 363.015 160.993 363.626 161.8 364.091 cv
163.414 365.023 166.03 365.023 167.644 364.091 cv
168.451 363.626 168.855 363.015 168.855 362.405 cv
174.595 250.83 li
166.33 250.83 li
cp
f
330.616 204.154 mo
335.209 315.729 li
335.209 316.339 335.612 316.949 336.419 317.415 cv
338.033 318.347 340.649 318.347 342.263 317.415 cv
343.07 316.949 343.473 316.339 343.473 315.729 cv
338.881 204.154 li
330.616 204.154 li
cp
f
287.335 176.396 mo
287.335 287.971 li
287.335 288.581 287.738 289.192 288.545 289.658 cv
290.159 290.589 292.776 290.589 294.389 289.658 cv
295.196 289.192 295.6 288.581 295.6 287.971 cv
295.6 176.396 li
287.335 176.396 li
cp
f
249.038 98.8711 mo
243.106 92.5003 237.126 87.447 231.009 86.1909 cv
227.635 120.107 li
231.318 116.103 236.287 115.994 241.126 118.7 cv
245.35 124.814 249.018 127.049 255.75 131.33 cv
266.99 116.554 li
249.038 98.8711 li
.921569 .521569 .431373 rgb
f
234.192 262.987 mo
232.278 267.889 228.055 273.449 230.667 277.971 cv
230.667 277.971 236.074 280.613 237.832 284.528 cv
240.702 290.922 246.806 295.63 249.093 297.301 cv
258.438 304.13 271.009 294.955 269.14 291.226 cv
264.509 281.987 251.677 277.21 249.328 266.771 cv
248.153 257.376 li
234.061 256.072 li
234.192 262.987 li
0 0 0 rgb
f
249.585 234.423 mo
249.332 266.772 li
247.733 267.704 237.464 272.902 232.117 272.338 cv
230.748 272.2 229.702 271.683 229.207 270.625 cv
228.943 258.768 221.491 235.998 222.709 221.773 cv
208.622 208.675 203.804 200.51 191.821 185.204 cv
189.268 187.032 li
188.969 186.618 188.659 186.204 188.325 185.813 cv
185.473 182.259 182.667 178.649 179.884 174.98 cv
210.646 149.554 li
211.888 148.53 li
212.233 148.979 212.59 149.439 212.923 149.887 cv
214.821 152.348 216.661 154.832 218.455 157.351 cv
229.357 172.634 238.568 189.286 246.618 210.802 cv
250.815 222.555 250.263 228.765 249.585 234.423 cv
.47451 .392157 .701961 rgb
f
108.054 309.087 mo
106.513 314.024 106.203 315.459 106.85 319.118 cv
107.583 321.056 108.321 321.927 109.124 324.602 cv
110.07 327.907 109.926 333.429 114.846 336.733 cv
120.709 341.364 132.04 341.577 135.606 336.639 cv
135.606 334.232 134.009 328.915 131.04 324.611 cv
125.284 313.912 li
125.652 303.889 li
109.124 300.26 li
108.054 309.087 li
cp
0 0 0 rgb
f
211.888 148.53 mo
211.739 148.91 211.601 149.289 211.44 149.669 cv
207.875 158.765 212.417 171.128 189.268 187.032 cv
188.129 187.814 186.934 188.596 185.657 189.389 cv
184.346 190.217 182.977 191.034 181.517 191.873 cv
173.893 214.999 165.889 236.366 156.942 253.49 cv
149.892 265.967 li
124.949 314.347 li
113.978 317.498 106.193 313.232 106.538 302.249 cv
108.021 298.431 109.447 294.498 110.839 290.577 cv
117.486 271.89 123.442 253.628 131.619 250.465 cv
142.958 180.155 li
144.614 167.873 146.925 156.684 151.41 149.036 cv
172.443 160.283 195.133 160.421 210.52 149.542 cv
210.98 149.209 211.44 148.875 211.888 148.53 cv
.47451 .392157 .701961 rgb
f
211.298 210.095 mo
204.71 202.579 199.89 195.511 191.824 185.208 cv
207.603 173.5 208.622 163.772 209.922 155.91 cv
211.664 154.968 213.406 153.938 215.148 152.819 cv
216.269 154.318 217.37 155.828 218.455 157.351 cv
215.005 162.066 210.244 167.367 207.564 170.944 cv
206.802 183.982 209.541 196.137 216.107 207.318 cv
211.298 210.095 li
.266667 .211765 .423529 rgb
f
110.827 290.91 mo
110.839 290.577 li
117.486 271.89 123.442 253.628 131.619 250.465 cv
142.958 180.155 li
144.446 169.119 146.463 158.965 150.111 151.47 cv
160.223 159.441 171.153 163.415 182.471 163.415 cv
191.451 163.415 200.678 160.91 209.922 155.91 cv
208.622 163.772 207.603 173.5 191.824 185.208 cv
191.824 185.208 li
191.823 185.206 191.822 185.205 191.821 185.204 cv
189.268 187.032 li
189.268 187.032 li
188.129 187.814 186.934 188.596 185.657 189.389 cv
185.657 189.389 li
168.545 175.785 li
147.742 187.964 144.947 215.126 141.072 246.682 cv
110.827 290.91 li
f
241.115 108.961 mo
237.879 128.406 219.115 140.624 215.69 150.293 cv
215.387 151.155 215.206 151.987 215.161 152.81 cv
192.435 167.417 169.595 166.956 149.893 151.298 cv
155.722 134.13 159.079 116.877 167.947 105.862 cv
172.869 99.7377 179.499 95.5416 189.207 94.3474 cv
202.671 82.3798 217.958 75.4389 239.104 84.7683 cv
239.104 84.7683 244.351 89.5161 241.115 108.961 cv
.929412 .109804 .258824 rgb
f
210.247 88.551 mo
202.938 95.4813 li
197.772 105.688 205.339 113.151 215.665 116.902 cv
221.525 116.13 224.622 111.473 227.635 106.696 cv
210.247 88.551 li
.921569 .521569 .431373 rgb
f
220.109 120.277 mo
219.881 120.277 219.658 120.259 219.439 120.221 cv
216.276 119.677 214.33 118.024 213.174 115.9 cv
213.982 116.259 214.814 116.593 215.665 116.902 cv
221.525 116.13 224.622 111.473 227.635 106.696 cv
224.004 102.906 li
236.733 105.096 li
236.733 105.096 226.685 120.277 220.109 120.277 cv
.827451 .0862745 .196078 rgb
f
215.665 116.902 mo
214.814 116.593 213.982 116.259 213.174 115.9 cv
210.048 110.154 212.704 100.963 212.704 100.963 cv
224.004 102.906 li
227.635 106.696 li
224.622 111.473 221.525 116.13 215.665 116.902 cv
.819608 .415686 .329412 rgb
f
212.704 100.963 mo
213.141 104.458 li
213.465 107.052 214.844 109.398 216.954 110.943 cv
220.666 113.661 227.937 120.996 234.25 114.382 cv
236.864 111.643 240.298 100.396 240.298 100.396 cv
242.378 95.2924 li
242.967 87.3676 242.374 80.2512 237.841 75.8247 cv
231.4 66.7104 223.389 65.7357 214.594 68.8314 cv
210.502 71.6182 208.365 75.4762 207.412 79.983 cv
207.412 92.4574 li
212.704 100.963 li
cp
.921569 .521569 .431373 rgb
f
207.412 92.4574 mo
213.775 98.3794 li
216.61 94.6627 li
225.367 98.6313 239.605 96.8673 243.26 90.6304 cv
243.26 90.6304 244.519 88.1104 243.606 84.4246 cv
243.355 83.4132 241.896 77.5486 239.164 74.1238 cv
236.433 70.699 233.149 67.3977 227.919 65.902 cv
222.688 64.4061 217.783 65.1331 213.932 66.9414 cv
210.081 68.7495 208.159 70.924 206.372 74.7853 cv
204.586 78.6466 204.668 84.7582 205.049 88.0159 cv
205.43 91.2733 207.79 95.9539 207.79 95.9539 cv
207.412 92.4574 li
cp
.376471 .219608 .0745098 rgb
f
211.827 91.8702 mo
211.057 90.7545 209.556 90.0234 208.311 90.5583 cv
207.027 91.1095 206.551 92.6914 206.506 94.0873 cv
206.426 96.5623 207.245 99.057 208.776 101.003 cv
209.189 101.529 209.67 102.028 210.281 102.3 cv
210.892 102.572 211.659 102.575 212.186 102.164 cv
212.714 101.752 212.894 101.04 212.988 100.377 cv
213.212 98.7886 212.949 97.3048 212.882 95.7271 cv
212.825 94.3837 212.61 93.0057 211.827 91.8702 cv
cp
.921569 .521569 .431373 rgb
f
182.471 163.415 mo
171.072 163.415 160.066 159.383 149.893 151.298 cv
155.722 134.13 159.079 116.877 167.947 105.862 cv
166.949 112.144 169.081 117.996 173.073 123.583 cv
203.821 147.019 li
215.69 150.293 li
215.387 151.155 215.206 151.987 215.161 152.81 cv
204.169 159.875 193.148 163.415 182.471 163.415 cv
.796078 .0784314 .192157 rgb
f
337.088 200.745 mo
294.502 176.157 li
293.327 175.479 292.075 175.337 291.233 175.337 cv
290.39 175.337 289.139 175.479 287.964 176.158 cv
202.2 225.674 li
174.646 241.582 li
159.998 244.623 li
159.998 252.256 li
159.998 253.666 160.783 254.927 162.151 255.717 cv
208.822 282.663 li
209.997 283.341 211.248 283.483 212.091 283.483 cv
212.934 283.483 214.185 283.341 215.36 282.663 cv
252.849 261.018 li
341.173 210.024 li
342.541 209.235 343.325 207.973 343.325 206.564 cv
343.325 198.93 li
337.088 200.745 li
.129412 .0784314 .211765 rgb
f
202.2 218.04 mo
162.151 241.162 li
160.783 241.952 159.998 243.213 159.998 244.623 cv
159.998 246.032 160.782 247.294 162.151 248.084 cv
208.821 275.029 li
209.997 275.708 211.248 275.85 212.091 275.85 cv
212.934 275.85 214.185 275.708 215.36 275.029 cv
252.849 253.385 li
341.173 202.39 li
342.541 201.601 343.325 200.34 343.325 198.93 cv
343.325 197.521 342.541 196.26 341.173 195.47 cv
294.502 168.524 li
293.327 167.846 292.075 167.703 291.233 167.703 cv
290.39 167.703 289.139 167.846 287.964 168.524 cv
202.2 218.04 li
.984314 .690196 .231373 rgb
f
332.282 194.033 mo
292.512 171.071 li
291.459 170.463 289.751 170.463 288.698 171.071 cv
162.723 239.363 li
162.723 244.448 li
162.723 244.847 162.986 245.245 163.513 245.549 cv
210.184 272.495 li
211.237 273.103 212.945 273.103 213.998 272.495 cv
320.822 210.725 302.978 221.03 285.173 231.335 cv
268.401 241.042 251.664 250.749 339.184 200.219 cv
339.71 199.915 339.973 199.517 339.973 199.118 cv
339.973 194.033 li
332.282 194.033 li
.129412 .0784314 .211765 rgb
f
255.551 186.087 mo
288.698 166.949 li
289.751 166.341 291.459 166.341 292.512 166.949 cv
332.282 189.911 li
339.973 189.911 li
339.973 194.996 li
339.973 195.395 339.71 195.793 339.184 196.097 cv
299.135 219.219 li
298.082 219.827 296.374 219.827 295.321 219.219 cv
248.65 192.274 li
248.123 191.969 247.86 191.571 247.86 191.173 cv
247.86 186.087 li
255.551 186.087 li
f
248.65 187.188 mo
295.321 214.134 li
296.374 214.742 298.082 214.742 299.135 214.134 cv
339.184 191.012 li
340.236 190.404 340.236 189.418 339.184 188.81 cv
292.512 161.864 li
291.459 161.256 289.751 161.256 288.698 161.864 cv
248.65 184.986 li
247.597 185.594 247.597 186.58 248.65 187.188 cv
.47451 .392157 .701961 rgb
f
297.948 217.964 mo
250.865 245.147 li
200.725 216.199 li
247.808 189.015 li
297.948 217.964 li
.239216 .239216 .34902 rgb
f
225.245 223.232 mo
224.701 223.545 li
209.702 214.886 li
210.246 214.571 li
225.245 223.232 li
cp
1 1 1 rgb
f
226.411 222.559 mo
225.867 222.873 li
210.868 214.213 li
211.411 213.899 li
226.411 222.559 li
cp
f
288.21 218.357 mo
287.666 218.671 li
272.667 210.011 li
273.211 209.697 li
288.21 218.357 li
cp
f
289.375 217.684 mo
288.832 217.998 li
273.832 209.338 li
274.376 209.024 li
289.375 217.684 li
cp
f
283.587 221.026 mo
283.043 221.34 li
268.044 212.68 li
268.588 212.366 li
283.587 221.026 li
cp
f
284.753 220.353 mo
284.209 220.667 li
269.209 212.007 li
269.753 211.693 li
284.753 220.353 li
cp
f
236.15 228.017 mo
233.237 229.699 li
227.482 226.376 li
230.395 224.694 li
236.15 228.017 li
.47451 .392157 .701961 rgb
f
230.529 220.181 mo
229.985 220.495 li
214.985 211.835 li
215.529 211.521 li
230.529 220.181 li
cp
1 1 1 rgb
f
231.694 219.508 mo
231.15 219.822 li
216.151 211.162 li
216.695 210.849 li
231.694 219.508 li
cp
f
241.434 224.966 mo
238.52 226.649 li
232.765 223.326 li
235.679 221.644 li
241.434 224.966 li
cp
.129412 .0784314 .211765 rgb
f
235.812 217.131 mo
235.268 217.445 li
220.269 208.785 li
220.813 208.471 li
235.812 217.131 li
cp
1 1 1 rgb
f
236.977 216.458 mo
236.434 216.772 li
221.434 208.112 li
221.978 207.798 li
236.977 216.458 li
cp
f
246.717 221.916 mo
243.803 223.599 li
238.048 220.276 li
240.962 218.594 li
246.717 221.916 li
cp
.129412 .0784314 .211765 rgb
f
241.095 214.081 mo
240.551 214.394 li
225.552 205.735 li
226.096 205.421 li
241.095 214.081 li
cp
1 1 1 rgb
f
242.261 213.408 mo
241.717 213.722 li
226.717 205.062 li
227.261 204.748 li
242.261 213.408 li
cp
f
252 218.866 mo
249.087 220.548 li
243.332 217.226 li
246.245 215.543 li
252 218.866 li
cp
.129412 .0784314 .211765 rgb
f
246.379 211.03 mo
245.835 211.344 li
230.835 202.684 li
231.379 202.37 li
246.379 211.03 li
cp
1 1 1 rgb
f
247.544 210.357 mo
247 210.672 li
232.001 202.012 li
232.544 201.698 li
247.544 210.357 li
cp
f
257.284 215.816 mo
254.37 217.498 li
248.615 214.175 li
251.529 212.493 li
257.284 215.816 li
cp
.129412 .0784314 .211765 rgb
f
170.414 235.241 mo
203.561 216.103 li
204.614 215.495 206.322 215.495 207.375 216.103 cv
247.145 239.065 li
254.836 239.065 li
254.836 244.15 li
254.836 244.549 254.573 244.947 254.046 245.251 cv
213.998 268.373 li
212.945 268.981 211.237 268.981 210.184 268.373 cv
163.513 241.427 li
162.986 241.124 162.723 240.725 162.723 240.326 cv
162.723 235.241 li
170.414 235.241 li
f
163.513 236.342 mo
210.184 263.288 li
211.237 263.896 212.945 263.896 213.998 263.288 cv
254.046 240.166 li
255.1 239.558 255.1 238.572 254.046 237.964 cv
207.375 211.018 li
206.322 210.41 204.614 210.41 203.561 211.018 cv
163.513 234.14 li
162.459 234.748 162.459 235.734 163.513 236.342 cv
.47451 .392157 .701961 rgb
f
239.16 218.307 mo
241.402 217.005 li
243.616 219.435 li
241.374 220.737 li
239.16 218.307 li
cp
.870588 .580392 .129412 rgb
f
241.374 220.737 mo
243.616 219.435 li
245.575 221.038 li
243.333 222.341 li
241.374 220.737 li
cp
.984314 .690196 .231373 rgb
f
243.333 222.341 mo
245.575 221.038 li
245.902 221.951 li
243.66 223.254 li
243.333 222.341 li
cp
.870588 .580392 .129412 rgb
f
239.16 218.307 mo
241.374 220.737 li
243.333 222.341 li
243.66 223.254 li
238.611 220.339 li
239.16 218.307 li
cp
.129412 .0784314 .211765 rgb
f
244.57 215.182 mo
246.811 213.88 li
249.025 216.31 li
246.784 217.613 li
244.57 215.182 li
cp
.929412 .109804 .258824 rgb
f
246.784 217.613 mo
249.025 216.31 li
250.984 217.913 li
248.743 219.216 li
246.784 217.613 li
cp
.929412 .286275 .403922 rgb
f
248.743 219.216 mo
250.984 217.913 li
251.311 218.827 li
249.07 220.129 li
248.743 219.216 li
cp
.729412 .0862745 .203922 rgb
f
244.57 215.182 mo
246.784 217.613 li
248.743 219.216 li
249.07 220.129 li
244.021 217.214 li
244.57 215.182 li
cp
.129412 .0784314 .211765 rgb
f
249.979 212.057 mo
252.221 210.755 li
254.435 213.185 li
252.193 214.488 li
249.979 212.057 li
cp
.870588 .580392 .129412 rgb
f
252.193 214.488 mo
254.435 213.185 li
256.394 214.789 li
254.152 216.091 li
252.193 214.488 li
cp
.984314 .690196 .231373 rgb
f
254.152 216.091 mo
256.394 214.789 li
256.721 215.702 li
254.479 217.005 li
254.152 216.091 li
cp
.870588 .580392 .129412 rgb
f
249.979 212.057 mo
252.193 214.488 li
254.152 216.091 li
254.479 217.005 li
249.43 214.089 li
249.979 212.057 li
cp
.129412 .0784314 .211765 rgb
f
233.736 222.74 mo
235.977 221.438 li
237.938 222.096 li
235.696 223.399 li
233.736 222.74 li
cp
.929412 .286275 .403922 rgb
f
237.917 223.529 mo
240.158 222.226 li
240.694 224.885 li
238.452 226.188 li
237.917 223.529 li
cp
.729412 .0862745 .203922 rgb
f
235.696 223.399 mo
237.938 222.096 li
240.158 222.226 li
237.917 223.529 li
235.696 223.399 li
cp
.929412 .109804 .258824 rgb
f
237.917 223.529 mo
238.452 226.188 li
233.404 223.273 li
233.736 222.74 li
235.696 223.399 li
237.917 223.529 li
cp
.129412 .0784314 .211765 rgb
f
231.692 218.052 mo
227.478 220.484 li
225.406 219.288 li
225.406 217.713 li
229.619 216.855 li
231.692 217.181 li
231.692 218.052 li
cp
f
231.692 217.181 mo
227.478 219.613 li
225.406 217.713 li
229.619 215.28 li
231.692 217.181 li
cp
.984314 .690196 .231373 rgb
f
226.319 217.813 mo
229.546 215.95 li
230.778 217.081 li
227.552 218.943 li
226.319 217.813 li
cp
.239216 .239216 .34902 rgb
f
230.2 210.776 mo
225.986 213.209 li
223.914 212.012 li
223.914 210.437 li
228.127 209.579 li
230.2 209.905 li
230.2 210.776 li
cp
.129412 .0784314 .211765 rgb
f
230.2 209.905 mo
225.986 212.337 li
223.914 210.437 li
228.127 208.004 li
230.2 209.905 li
cp
.984314 .690196 .231373 rgb
f
224.827 210.537 mo
228.054 208.674 li
229.286 209.804 li
226.06 211.667 li
224.827 210.537 li
cp
.239216 .239216 .34902 rgb
f
239.719 210.199 mo
235.505 212.632 li
233.432 211.435 li
233.432 209.86 li
237.646 209.002 li
239.719 209.328 li
239.719 210.199 li
cp
.129412 .0784314 .211765 rgb
f
239.719 209.328 mo
235.505 211.76 li
233.432 209.86 li
237.646 207.427 li
239.719 209.328 li
cp
.984314 .690196 .231373 rgb
f
234.346 209.96 mo
237.572 208.097 li
238.805 209.228 li
235.579 211.09 li
234.346 209.96 li
cp
.239216 .239216 .34902 rgb
f
236 202.205 mo
231.787 204.638 li
229.714 203.441 li
229.714 201.866 li
233.928 201.009 li
236 201.334 li
236 202.205 li
cp
.129412 .0784314 .211765 rgb
f
236 201.334 mo
231.787 203.767 li
229.714 201.866 li
233.928 199.434 li
236 201.334 li
cp
.984314 .690196 .231373 rgb
f
230.628 201.967 mo
233.854 200.104 li
235.087 201.234 li
231.86 203.097 li
230.628 201.967 li
cp
.239216 .239216 .34902 rgb
f
282.768 217.598 mo
278.555 220.031 li
276.482 218.834 li
276.482 217.259 li
280.695 216.401 li
282.768 216.727 li
282.768 217.598 li
cp
.129412 .0784314 .211765 rgb
f
282.768 216.727 mo
278.555 219.159 li
276.482 217.259 li
280.695 214.826 li
282.768 216.727 li
cp
.929412 .109804 .258824 rgb
f
277.396 217.359 mo
280.622 215.496 li
281.854 216.626 li
278.628 218.489 li
277.396 217.359 li
cp
.239216 .239216 .34902 rgb
f
280.888 211.803 mo
276.674 214.236 li
274.601 213.039 li
274.601 211.464 li
278.815 210.607 li
280.888 210.932 li
280.888 211.803 li
cp
.129412 .0784314 .211765 rgb
f
280.888 210.932 mo
276.674 213.365 li
274.601 211.464 li
278.815 209.032 li
280.888 210.932 li
cp
.984314 .690196 .231373 rgb
f
275.515 211.565 mo
278.741 209.702 li
279.974 210.832 li
276.747 212.695 li
275.515 211.565 li
cp
.239216 .239216 .34902 rgb
f
309.694 174.014 mo
320.458 180.228 320.458 190.304 309.694 196.518 cv
298.931 202.732 281.48 202.732 270.716 196.518 cv
259.953 190.304 259.953 180.228 270.716 174.014 cv
281.48 167.8 298.931 167.8 309.694 174.014 cv
.129412 .0784314 .211765 rgb
f
308.36 173.15 mo
318.386 178.939 318.386 188.324 308.36 194.113 cv
298.333 199.902 282.077 199.902 272.051 194.113 cv
262.024 188.324 262.024 178.939 272.051 173.15 cv
282.077 167.361 298.333 167.361 308.36 173.15 cv
.301961 .301961 .301961 rgb
f
307.692 172.445 mo
317.35 178.022 317.35 187.062 307.692 192.638 cv
298.035 198.214 282.376 198.214 272.718 192.638 cv
263.06 187.062 263.06 178.022 272.718 172.445 cv
282.376 166.87 298.035 166.87 307.692 172.445 cv
0 0 0 rgb
f
295.599 179.427 mo
298.578 181.147 298.578 183.936 295.599 185.656 cv
292.62 187.376 287.79 187.376 284.811 185.656 cv
281.832 183.936 281.832 181.147 284.811 179.427 cv
287.79 177.708 292.62 177.708 295.599 179.427 cv
1 1 1 rgb
f
295.214 179.65 mo
297.98 181.247 297.98 183.836 295.214 185.433 cv
292.448 187.031 287.963 187.031 285.196 185.433 cv
282.43 183.836 282.43 181.247 285.196 179.65 cv
287.963 178.053 292.448 178.053 295.214 179.65 cv
.780392 .698039 .6 rgb
f
290.976 182.097 mo
291.401 182.342 291.401 182.741 290.976 182.987 cv
290.55 183.232 289.86 183.232 289.435 182.987 cv
289.009 182.741 289.009 182.342 289.435 182.097 cv
289.86 181.851 290.55 181.851 290.976 182.097 cv
cp
1 1 1 rgb
f
290.655 180.261 mo
290.407 180.015 290.004 180.015 289.756 180.261 cv
289.632 180.384 289.57 180.546 289.57 180.708 cv
289.57 182.549 li
289.57 182.643 289.632 182.737 289.756 182.809 cv
290.004 182.952 290.407 182.952 290.655 182.809 cv
290.779 182.737 290.841 182.643 290.841 182.549 cv
290.841 180.708 li
290.841 180.546 290.779 180.384 290.655 180.261 cv
cp
.2 .2 .2 rgb
f
311.587 188.947 mo
297.682 184.563 li
298.136 183.939 298.378 183.255 298.378 182.542 cv
298.378 181.782 298.1 181.058 297.587 180.402 cv
312.078 176.694 li
313.591 178.504 314.391 180.491 314.391 182.542 cv
314.391 184.804 313.418 186.991 311.587 188.947 cv
.2 .2 .2 rgb
f
268.003 187.972 mo
266.707 186.275 266.02 184.436 266.02 182.542 cv
266.02 180.08 267.173 177.708 269.33 175.625 cv
283.183 179.993 li
282.437 180.75 282.032 181.621 282.032 182.542 cv
282.032 183.14 282.209 183.715 282.53 184.255 cv
268.003 187.972 li
f
319.909 188.632 mo
319.909 190.088 li
319.909 191.158 320.616 192.227 322.03 193.044 cv
324.858 194.677 329.443 194.677 332.27 193.044 cv
333.684 192.227 334.391 191.158 334.391 190.088 cv
334.391 188.632 li
319.909 188.632 li
cp
0 0 0 rgb
f
332.27 185.676 mo
335.098 187.308 335.098 189.956 332.27 191.588 cv
329.443 193.221 324.858 193.221 322.03 191.588 cv
319.202 189.956 319.202 187.308 322.03 185.676 cv
324.858 184.043 329.443 184.043 332.27 185.676 cv
cp
.301961 .301961 .301961 rgb
f
322.03 186.719 mo
322.03 188.459 li
322.03 189.216 322.53 189.972 323.53 190.55 cv
325.529 191.704 328.771 191.704 330.771 190.55 cv
331.771 189.972 332.27 189.216 332.27 188.459 cv
332.27 186.719 li
322.03 186.719 li
cp
0 0 0 rgb
f
330.771 184.628 mo
332.77 185.783 332.77 187.654 330.771 188.809 cv
328.771 189.963 325.529 189.963 323.53 188.809 cv
321.53 187.654 321.53 185.783 323.53 184.628 cv
325.529 183.474 328.771 183.474 330.771 184.628 cv
cp
.4 .4 .4 rgb
f
289.315 162.068 mo
289.315 164.912 li
289.315 165.081 289.427 165.25 289.65 165.379 cv
290.097 165.636 290.82 165.636 291.267 165.379 cv
291.49 165.25 291.602 165.081 291.602 164.912 cv
291.602 162.068 li
289.315 162.068 li
cp
0 0 0 rgb
f
291.267 161.601 mo
291.713 161.859 291.713 162.277 291.267 162.535 cv
290.82 162.792 290.097 162.792 289.65 162.535 cv
289.204 162.277 289.204 161.859 289.65 161.601 cv
290.097 161.344 290.82 161.344 291.267 161.601 cv
cp
.780392 .698039 .6 rgb
f
253.401 185.206 mo
253.401 186.426 li
253.401 186.956 253.751 187.486 254.451 187.89 cv
255.852 188.699 258.123 188.699 259.524 187.89 cv
260.225 187.486 260.575 186.956 260.575 186.426 cv
260.575 185.206 li
253.401 185.206 li
cp
0 0 0 rgb
f
259.524 183.742 mo
260.925 184.551 260.925 185.862 259.524 186.671 cv
258.123 187.48 255.852 187.48 254.451 186.671 cv
253.051 185.862 253.051 184.551 254.451 183.742 cv
255.852 182.933 258.123 182.933 259.524 183.742 cv
cp
.780392 .698039 .6 rgb
f
299.141 209.918 mo
297.098 211.097 li
293.917 209.261 li
295.96 208.081 li
299.141 209.918 li
cp
1 1 1 rgb
f
305.18 206.431 mo
303.137 207.611 li
299.956 205.774 li
301.999 204.594 li
305.18 206.431 li
cp
f
307.768 204.937 mo
305.725 206.116 li
302.544 204.28 li
304.587 203.1 li
307.768 204.937 li
cp
f
310.357 203.442 mo
308.313 204.622 li
305.132 202.785 li
307.175 201.605 li
310.357 203.442 li
cp
.984314 .690196 .231373 rgb
f
302.638 207.899 mo
299.595 209.655 li
296.414 207.819 li
299.456 206.062 li
302.638 207.899 li
cp
.929412 .109804 .258824 rgb
f
287.242 191.322 mo
287.159 190.174 li
305.948 188.811 li
323.041 185.897 li
323.235 187.031 li
306.086 189.952 li
287.242 191.322 li
cp
.501961 .501961 .501961 rgb
f
335.011 182.394 mo
336.413 185.02 li
331.385 185.421 li
329.984 182.795 li
335.011 182.394 li
cp
.2 .2 .2 rgb
f
329.984 182.795 mo
331.385 185.421 li
330.026 183.543 li
328.624 180.917 li
329.984 182.795 li
cp
.337255 .337255 .337255 rgb
f
319.634 183.191 mo
321.036 185.816 li
320.125 187.95 li
318.724 185.325 li
319.634 183.191 li
cp
.501961 .501961 .501961 rgb
f
328.624 180.917 mo
330.026 183.543 li
321.036 185.816 li
319.634 183.191 li
328.624 180.917 li
cp
.2 .2 .2 rgb
f
330.026 183.543 mo
331.385 185.421 li
336.413 185.02 li
336.394 186.899 li
332.884 187.482 li
324.511 188.873 li
321.431 189.385 li
320.878 188.776 320.682 188.563 320.125 187.95 cv
321.036 185.816 li
330.026 183.543 li
cp
0 0 0 rgb
f
290.198 190.516 mo
290.453 188.89 li
290.459 190.847 li
290.203 192.474 li
287.205 192.706 li
287.2 190.748 li
290.198 190.516 li
cp
.301961 .301961 .301961 rgb
f
281.179 190.87 mo
281.185 192.015 li
287.205 192.706 li
287.2 190.748 li
281.179 190.87 li
cp
f
287.575 188.359 mo
281.435 189.244 li
281.179 190.87 li
287.2 190.748 li
290.198 190.516 li
290.453 188.89 li
287.575 188.359 li
cp
.4 .4 .4 rgb
f
259.659 217.143 mo
258.844 217.613 258.844 218.376 259.659 218.846 cv
260.473 219.316 261.793 219.316 262.608 218.846 cv
263.422 218.376 263.422 217.613 262.608 217.143 cv
261.793 216.673 260.473 216.673 259.659 217.143 cv
cp
1 1 1 rgb
f
259.291 217.658 mo
259.975 214.705 li
262.292 214.705 li
262.978 217.658 li
263.05 217.979 262.876 218.315 262.449 218.562 cv
261.722 218.981 260.544 218.981 259.817 218.562 cv
259.39 218.315 259.216 217.979 259.291 217.658 cv
cp
.129412 .0784314 .211765 rgb
f
260.307 214.318 mo
259.85 214.582 259.85 215.009 260.307 215.273 cv
260.763 215.536 261.503 215.536 261.96 215.273 cv
262.416 215.009 262.416 214.582 261.96 214.318 cv
261.503 214.055 260.763 214.055 260.307 214.318 cv
cp
1 1 1 rgb
f
253.972 220.427 mo
253.158 220.897 253.158 221.659 253.972 222.129 cv
254.786 222.599 256.106 222.599 256.921 222.129 cv
257.735 221.659 257.735 220.897 256.921 220.427 cv
256.106 219.956 254.786 219.956 253.972 220.427 cv
cp
f
253.604 220.942 mo
254.288 217.988 li
256.605 217.988 li
257.291 220.942 li
257.363 221.262 257.189 221.599 256.763 221.845 cv
256.036 222.265 254.857 222.265 254.13 221.845 cv
253.703 221.599 253.529 221.262 253.604 220.942 cv
cp
.129412 .0784314 .211765 rgb
f
254.62 217.601 mo
254.163 217.865 254.163 218.292 254.62 218.556 cv
255.076 218.819 255.817 218.819 256.273 218.556 cv
256.729 218.292 256.729 217.865 256.273 217.601 cv
255.817 217.338 255.076 217.338 254.62 217.601 cv
cp
1 1 1 rgb
f
248.285 223.71 mo
247.471 224.18 247.471 224.943 248.285 225.413 cv
249.099 225.883 250.419 225.883 251.234 225.413 cv
252.048 224.943 252.048 224.18 251.234 223.71 cv
250.419 223.24 249.099 223.24 248.285 223.71 cv
cp
f
247.917 224.225 mo
248.601 221.272 li
250.918 221.272 li
251.604 224.225 li
251.677 224.546 251.503 224.882 251.076 225.128 cv
250.349 225.548 249.17 225.548 248.443 225.128 cv
248.017 224.882 247.842 224.546 247.917 224.225 cv
cp
.129412 .0784314 .211765 rgb
f
248.933 220.885 mo
248.477 221.148 248.477 221.576 248.933 221.839 cv
249.389 222.103 250.129 222.103 250.586 221.839 cv
251.043 221.576 251.043 221.148 250.586 220.885 cv
250.129 220.621 249.389 220.621 248.933 220.885 cv
cp
1 1 1 rgb
f
242.598 226.993 mo
241.784 227.463 241.784 228.226 242.598 228.696 cv
243.412 229.166 244.733 229.166 245.547 228.696 cv
246.362 228.226 246.362 227.463 245.547 226.993 cv
244.733 226.523 243.412 226.523 242.598 226.993 cv
cp
f
242.23 227.508 mo
242.914 224.555 li
245.231 224.555 li
245.917 227.508 li
245.99 227.829 245.816 228.165 245.389 228.412 cv
244.662 228.831 243.484 228.831 242.757 228.412 cv
242.33 228.165 242.155 227.829 242.23 227.508 cv
cp
.129412 .0784314 .211765 rgb
f
243.246 224.168 mo
242.79 224.432 242.79 224.859 243.246 225.122 cv
243.703 225.386 244.443 225.386 244.899 225.122 cv
245.356 224.859 245.356 224.432 244.899 224.168 cv
244.443 223.904 243.703 223.904 243.246 224.168 cv
cp
1 1 1 rgb
f
266.104 221.002 mo
265.29 221.472 265.29 222.235 266.104 222.705 cv
266.918 223.175 268.238 223.175 269.053 222.705 cv
269.867 222.235 269.867 221.472 269.053 221.002 cv
268.238 220.532 266.918 220.532 266.104 221.002 cv
cp
f
265.736 221.517 mo
266.42 218.564 li
268.737 218.564 li
269.423 221.517 li
269.495 221.838 269.321 222.174 268.894 222.421 cv
268.168 222.84 266.989 222.84 266.262 222.421 cv
265.835 222.174 265.661 221.838 265.736 221.517 cv
cp
.129412 .0784314 .211765 rgb
f
266.752 218.177 mo
266.295 218.441 266.295 218.868 266.752 219.131 cv
267.208 219.395 267.948 219.395 268.405 219.131 cv
268.862 218.868 268.862 218.441 268.405 218.177 cv
267.948 217.913 267.208 217.913 266.752 218.177 cv
cp
1 1 1 rgb
f
260.417 224.286 mo
259.603 224.756 259.603 225.518 260.417 225.988 cv
261.231 226.458 262.552 226.458 263.366 225.988 cv
264.18 225.518 264.18 224.756 263.366 224.286 cv
262.552 223.815 261.231 223.815 260.417 224.286 cv
cp
f
260.049 224.801 mo
260.733 221.847 li
263.05 221.847 li
263.736 224.801 li
263.809 225.121 263.635 225.458 263.208 225.704 cv
262.481 226.124 261.302 226.124 260.576 225.704 cv
260.148 225.458 259.974 225.121 260.049 224.801 cv
cp
.129412 .0784314 .211765 rgb
f
261.065 221.46 mo
260.608 221.724 260.608 222.151 261.065 222.415 cv
261.521 222.678 262.261 222.678 262.718 222.415 cv
263.175 222.151 263.175 221.724 262.718 221.46 cv
262.261 221.197 261.521 221.197 261.065 221.46 cv
cp
1 1 1 rgb
f
254.73 227.569 mo
253.916 228.039 253.916 228.801 254.73 229.271 cv
255.544 229.742 256.865 229.742 257.679 229.271 cv
258.493 228.801 258.493 228.039 257.679 227.569 cv
256.865 227.099 255.544 227.099 254.73 227.569 cv
cp
f
254.362 228.084 mo
255.046 225.131 li
257.363 225.131 li
258.049 228.084 li
258.122 228.404 257.948 228.741 257.521 228.987 cv
256.794 229.407 255.615 229.407 254.889 228.987 cv
254.462 228.741 254.287 228.404 254.362 228.084 cv
cp
.129412 .0784314 .211765 rgb
f
255.378 224.744 mo
254.922 225.007 254.922 225.434 255.378 225.698 cv
255.835 225.962 256.575 225.962 257.031 225.698 cv
257.488 225.434 257.488 225.007 257.031 224.744 cv
256.575 224.48 255.835 224.48 255.378 224.744 cv
cp
.984314 .690196 .231373 rgb
f
249.043 230.852 mo
248.229 231.322 248.229 232.085 249.043 232.555 cv
249.858 233.025 251.178 233.025 251.992 232.555 cv
252.806 232.085 252.806 231.322 251.992 230.852 cv
251.178 230.382 249.858 230.382 249.043 230.852 cv
cp
1 1 1 rgb
f
248.675 231.367 mo
249.359 228.414 li
251.676 228.414 li
252.362 231.367 li
252.435 231.688 252.261 232.024 251.834 232.271 cv
251.107 232.69 249.928 232.69 249.202 232.271 cv
248.775 232.024 248.601 231.688 248.675 231.367 cv
cp
.129412 .0784314 .211765 rgb
f
249.691 228.027 mo
249.235 228.29 249.235 228.718 249.691 228.981 cv
250.148 229.245 250.888 229.245 251.344 228.981 cv
251.801 228.718 251.801 228.29 251.344 228.027 cv
250.888 227.763 250.148 227.763 249.691 228.027 cv
cp
.984314 .690196 .231373 rgb
f
272.549 224.861 mo
271.735 225.331 271.735 226.093 272.549 226.564 cv
273.363 227.034 274.684 227.034 275.498 226.564 cv
276.312 226.093 276.312 225.331 275.498 224.861 cv
274.684 224.391 273.363 224.391 272.549 224.861 cv
cp
1 1 1 rgb
f
272.181 225.376 mo
272.865 222.423 li
275.182 222.423 li
275.868 225.376 li
275.941 225.697 275.766 226.033 275.339 226.28 cv
274.613 226.699 273.434 226.699 272.707 226.28 cv
272.28 226.033 272.106 225.697 272.181 225.376 cv
cp
.129412 .0784314 .211765 rgb
f
273.197 222.036 mo
272.74 222.299 272.74 222.727 273.197 222.99 cv
273.653 223.254 274.393 223.254 274.85 222.99 cv
275.307 222.727 275.307 222.299 274.85 222.036 cv
274.393 221.772 273.653 221.772 273.197 222.036 cv
cp
.984314 .690196 .231373 rgb
f
266.862 228.144 mo
266.048 228.615 266.048 229.377 266.862 229.847 cv
267.676 230.317 268.997 230.317 269.811 229.847 cv
270.625 229.377 270.625 228.615 269.811 228.144 cv
268.997 227.674 267.676 227.674 266.862 228.144 cv
cp
1 1 1 rgb
f
266.494 228.659 mo
267.178 225.706 li
269.495 225.706 li
270.181 228.659 li
270.254 228.98 270.079 229.316 269.653 229.563 cv
268.926 229.982 267.747 229.982 267.02 229.563 cv
266.593 229.316 266.419 228.98 266.494 228.659 cv
cp
.129412 .0784314 .211765 rgb
f
267.51 225.319 mo
267.053 225.583 267.053 226.01 267.51 226.274 cv
267.967 226.537 268.707 226.537 269.163 226.274 cv
269.62 226.01 269.62 225.583 269.163 225.319 cv
268.707 225.055 267.967 225.055 267.51 225.319 cv
cp
.984314 .690196 .231373 rgb
f
261.175 231.428 mo
260.361 231.898 260.361 232.66 261.175 233.13 cv
261.99 233.6 263.31 233.6 264.124 233.13 cv
264.938 232.66 264.938 231.898 264.124 231.428 cv
263.31 230.958 261.99 230.958 261.175 231.428 cv
cp
1 1 1 rgb
f
260.807 231.943 mo
261.491 228.989 li
263.808 228.989 li
264.494 231.943 li
264.567 232.263 264.393 232.6 263.966 232.846 cv
263.239 233.266 262.06 233.266 261.334 232.846 cv
260.907 232.6 260.733 232.263 260.807 231.943 cv
cp
.129412 .0784314 .211765 rgb
f
261.823 228.602 mo
261.367 228.866 261.367 229.293 261.823 229.557 cv
262.28 229.82 263.02 229.82 263.477 229.557 cv
263.933 229.293 263.933 228.866 263.477 228.602 cv
263.02 228.339 262.28 228.339 261.823 228.602 cv
cp
1 1 1 rgb
f
255.489 234.711 mo
254.674 235.181 254.674 235.943 255.489 236.413 cv
256.303 236.883 257.623 236.883 258.437 236.413 cv
259.252 235.943 259.252 235.181 258.437 234.711 cv
257.623 234.241 256.303 234.241 255.489 234.711 cv
cp
f
255.12 235.226 mo
255.804 232.273 li
258.121 232.273 li
258.808 235.226 li
258.88 235.547 258.706 235.883 258.279 236.13 cv
257.552 236.549 256.374 236.549 255.647 236.13 cv
255.22 235.883 255.046 235.547 255.12 235.226 cv
cp
.129412 .0784314 .211765 rgb
f
256.136 231.886 mo
255.68 232.149 255.68 232.577 256.136 232.84 cv
256.593 233.104 257.333 233.104 257.79 232.84 cv
258.246 232.577 258.246 232.149 257.79 231.886 cv
257.333 231.622 256.593 231.622 256.136 231.886 cv
cp
1 1 1 rgb
f
224.717 223.344 mo
235.48 229.558 235.48 239.634 224.717 245.848 cv
213.954 252.063 196.502 252.063 185.739 245.848 cv
174.976 239.634 174.976 229.558 185.739 223.344 cv
196.502 217.13 213.954 217.13 224.717 223.344 cv
.129412 .0784314 .211765 rgb
f
223.382 222.48 mo
233.409 228.269 233.409 237.654 223.382 243.443 cv
213.356 249.232 197.1 249.232 187.074 243.443 cv
177.047 237.654 177.047 228.269 187.074 222.48 cv
197.1 216.691 213.356 216.691 223.382 222.48 cv
.301961 .301961 .301961 rgb
f
222.715 221.776 mo
232.373 227.351 232.373 236.392 222.715 241.968 cv
213.057 247.544 197.399 247.544 187.741 241.968 cv
178.083 236.392 178.083 227.351 187.741 221.776 cv
197.399 216.2 213.057 216.2 222.715 221.776 cv
0 0 0 rgb
f
210.622 228.758 mo
213.601 230.477 213.601 233.266 210.622 234.986 cv
207.643 236.706 202.813 236.706 199.834 234.986 cv
196.855 233.266 196.855 230.477 199.834 228.758 cv
202.813 227.037 207.643 227.037 210.622 228.758 cv
1 1 1 rgb
f
210.237 228.98 mo
213.003 230.577 213.003 233.166 210.237 234.764 cv
207.471 236.36 202.986 236.36 200.219 234.764 cv
197.453 233.166 197.453 230.577 200.219 228.98 cv
202.986 227.383 207.471 227.383 210.237 228.98 cv
.780392 .698039 .6 rgb
f
205.999 231.427 mo
206.424 231.672 206.424 232.071 205.999 232.316 cv
205.573 232.562 204.883 232.562 204.457 232.316 cv
204.032 232.071 204.032 231.672 204.457 231.427 cv
204.883 231.181 205.573 231.181 205.999 231.427 cv
cp
1 1 1 rgb
f
205.677 229.591 mo
205.429 229.345 205.027 229.345 204.779 229.591 cv
204.655 229.715 204.593 229.876 204.593 230.038 cv
204.593 231.879 li
204.593 231.973 204.655 232.067 204.779 232.139 cv
205.027 232.282 205.429 232.282 205.677 232.139 cv
205.801 232.067 205.863 231.973 205.863 231.879 cv
205.863 230.038 li
205.863 229.876 205.801 229.715 205.677 229.591 cv
cp
.2 .2 .2 rgb
f
226.609 238.277 mo
212.705 233.893 li
213.159 233.269 213.401 232.585 213.401 231.872 cv
213.401 231.113 213.122 230.388 212.61 229.732 cv
227.101 226.024 li
228.614 227.834 229.414 229.822 229.414 231.872 cv
229.414 234.134 228.441 236.321 226.609 238.277 cv
.2 .2 .2 rgb
f
183.026 237.302 mo
181.73 235.605 181.043 233.766 181.043 231.872 cv
181.043 229.41 182.195 227.038 184.352 224.955 cv
198.205 229.323 li
197.46 230.079 197.055 230.951 197.055 231.872 cv
197.055 232.47 197.232 233.045 197.553 233.585 cv
183.026 237.302 li
f
234.932 237.962 mo
234.932 239.418 li
234.932 240.488 235.639 241.558 237.053 242.374 cv
239.881 244.007 244.465 244.007 247.293 242.374 cv
248.707 241.558 249.414 240.488 249.414 239.418 cv
249.414 237.962 li
234.932 237.962 li
cp
0 0 0 rgb
f
247.293 235.006 mo
250.121 236.639 250.121 239.286 247.293 240.918 cv
244.465 242.551 239.881 242.551 237.053 240.918 cv
234.225 239.286 234.225 236.639 237.053 235.006 cv
239.881 233.373 244.465 233.373 247.293 235.006 cv
cp
.301961 .301961 .301961 rgb
f
237.053 236.048 mo
237.053 237.789 li
237.053 238.546 237.553 239.302 238.552 239.88 cv
240.552 241.034 243.794 241.034 245.794 239.88 cv
246.793 239.302 247.293 238.546 247.293 237.789 cv
247.293 236.048 li
237.053 236.048 li
cp
0 0 0 rgb
f
245.794 233.958 mo
247.793 235.112 247.793 236.984 245.794 238.139 cv
243.794 239.293 240.552 239.293 238.552 238.139 cv
236.553 236.984 236.553 235.112 238.552 233.958 cv
240.552 232.804 243.794 232.804 245.794 233.958 cv
cp
.4 .4 .4 rgb
f
204.338 211.398 mo
204.338 214.242 li
204.338 214.411 204.45 214.58 204.673 214.709 cv
205.12 214.966 205.843 214.966 206.29 214.709 cv
206.513 214.58 206.625 214.411 206.625 214.242 cv
206.625 211.398 li
204.338 211.398 li
cp
0 0 0 rgb
f
206.29 210.931 mo
206.736 211.189 206.736 211.607 206.29 211.865 cv
205.843 212.123 205.12 212.123 204.673 211.865 cv
204.227 211.607 204.227 211.189 204.673 210.931 cv
205.12 210.674 205.843 210.674 206.29 210.931 cv
cp
.780392 .698039 .6 rgb
f
168.423 234.536 mo
168.423 235.756 li
168.423 236.286 168.774 236.816 169.474 237.22 cv
170.875 238.029 173.146 238.029 174.547 237.22 cv
175.247 236.816 175.597 236.286 175.597 235.756 cv
175.597 234.536 li
168.423 234.536 li
cp
0 0 0 rgb
f
174.547 233.072 mo
175.948 233.881 175.948 235.192 174.547 236.001 cv
173.146 236.81 170.875 236.81 169.474 236.001 cv
168.073 235.192 168.073 233.881 169.474 233.072 cv
170.875 232.263 173.146 232.263 174.547 233.072 cv
cp
.780392 .698039 .6 rgb
f
214.164 259.248 mo
212.121 260.427 li
208.939 258.59 li
210.982 257.411 li
214.164 259.248 li
cp
1 1 1 rgb
f
220.203 255.761 mo
218.16 256.941 li
214.978 255.104 li
217.021 253.924 li
220.203 255.761 li
cp
f
222.791 254.267 mo
220.748 255.446 li
217.567 253.61 li
219.61 252.43 li
222.791 254.267 li
cp
f
225.379 252.773 mo
223.336 253.952 li
220.155 252.115 li
222.198 250.936 li
225.379 252.773 li
cp
.984314 .690196 .231373 rgb
f
217.66 257.229 mo
214.618 258.986 li
211.437 257.149 li
214.479 255.392 li
217.66 257.229 li
cp
.929412 .109804 .258824 rgb
f
202.264 240.652 mo
202.181 239.504 li
220.971 238.141 li
238.064 235.227 li
238.258 236.361 li
221.109 239.282 li
202.264 240.652 li
cp
.501961 .501961 .501961 rgb
f
250.034 231.724 mo
251.436 234.35 li
246.408 234.751 li
245.006 232.125 li
250.034 231.724 li
cp
.2 .2 .2 rgb
f
245.006 232.125 mo
246.408 234.751 li
245.048 232.873 li
243.647 230.247 li
245.006 232.125 li
cp
.337255 .337255 .337255 rgb
f
234.657 232.521 mo
236.059 235.146 li
235.148 237.281 li
233.746 234.655 li
234.657 232.521 li
cp
.501961 .501961 .501961 rgb
f
243.647 230.247 mo
245.048 232.873 li
236.059 235.146 li
234.657 232.521 li
243.647 230.247 li
cp
.2 .2 .2 rgb
f
245.048 232.873 mo
246.408 234.751 li
251.436 234.35 li
251.417 236.229 li
247.906 236.812 li
239.534 238.204 li
236.454 238.715 li
235.901 238.106 235.705 237.893 235.148 237.281 cv
236.059 235.146 li
245.048 232.873 li
cp
0 0 0 rgb
f
205.22 239.846 mo
205.476 238.22 li
205.481 240.178 li
205.226 241.803 li
202.228 242.036 li
202.222 240.078 li
205.22 239.846 li
cp
.301961 .301961 .301961 rgb
f
196.202 240.2 mo
196.207 241.345 li
202.228 242.036 li
202.222 240.078 li
196.202 240.2 li
cp
f
202.598 237.689 mo
196.457 238.574 li
196.202 240.2 li
202.222 240.078 li
205.22 239.846 li
205.476 238.22 li
202.598 237.689 li
cp
.4 .4 .4 rgb
f
252.949 204.174 mo
252.949 206.083 li
252.949 207.006 253.559 207.929 254.779 208.634 cv
257.22 210.043 261.176 210.043 263.617 208.634 cv
264.837 207.929 265.447 207.006 265.447 206.083 cv
265.447 204.174 li
252.949 204.174 li
cp
.129412 .0784314 .211765 rgb
f
263.617 201.623 mo
266.057 203.032 266.057 205.316 263.617 206.726 cv
261.176 208.134 257.22 208.134 254.779 206.726 cv
252.339 205.316 252.339 203.032 254.779 201.623 cv
257.22 200.214 261.176 200.214 263.617 201.623 cv
cp
f
262.93 202.02 mo
264.991 203.21 264.991 205.139 262.93 206.329 cv
260.869 207.519 257.527 207.519 255.466 206.329 cv
253.405 205.139 253.405 203.21 255.466 202.02 cv
257.527 200.83 260.869 200.83 262.93 202.02 cv
cp
.780392 .698039 .6 rgb
f
259.68 205.89 mo
259.946 206.044 259.946 206.293 259.68 206.447 cv
259.414 206.6 258.982 206.6 258.716 206.447 cv
258.45 206.293 258.45 206.044 258.716 205.89 cv
258.982 205.736 259.414 205.736 259.68 205.89 cv
cp
1 1 1 rgb
f
240.452 197.128 mo
240.452 199.037 li
240.452 199.96 241.062 200.883 242.282 201.588 cv
244.722 202.997 248.679 202.997 251.119 201.588 cv
252.339 200.883 252.949 199.96 252.949 199.037 cv
252.949 197.128 li
240.452 197.128 li
cp
.129412 .0784314 .211765 rgb
f
251.119 194.577 mo
253.559 195.986 253.559 198.271 251.119 199.679 cv
248.679 201.088 244.722 201.088 242.282 199.679 cv
239.842 198.271 239.842 195.986 242.282 194.577 cv
244.722 193.168 248.679 193.168 251.119 194.577 cv
cp
f
250.432 194.974 mo
252.493 196.164 252.493 198.093 250.432 199.283 cv
248.371 200.473 245.03 200.473 242.969 199.283 cv
240.908 198.093 240.908 196.164 242.969 194.974 cv
245.03 193.784 248.371 193.784 250.432 194.974 cv
cp
.780392 .698039 .6 rgb
f
249.472 194.9 mo
249.739 195.054 249.739 195.303 249.472 195.457 cv
249.206 195.61 248.774 195.61 248.508 195.457 cv
248.242 195.303 248.242 195.054 248.508 194.9 cv
248.774 194.746 249.206 194.746 249.472 194.9 cv
cp
1 1 1 rgb
f
278.426 158.544 mo
279.101 159.758 li
278.89 165.6 li
280.69 169.718 li
281.614 172.266 li
283.873 174.77 li
285.038 175.803 286.127 174.412 285.426 172.717 cv
283.953 170.082 li
284.031 167.335 li
285.588 166.585 287.149 166.745 288.714 167.771 cv
288.714 167.771 289.761 171.156 289.787 171.314 cv
289.813 171.471 290.492 174.582 290.492 174.582 cv
290.887 177.262 292.963 177.06 292.901 174.873 cv
292.355 170.903 li
292.024 167.836 li
294.436 171.642 li
295.656 174.901 li
296.434 176.762 298.199 176.582 297.912 174.851 cv
297.059 171.854 li
296.003 168.927 li
298.41 171.71 li
299.143 174.229 li
299.359 174.97 299.885 175.698 300.655 175.758 cv
301.372 175.757 301.694 175.003 301.375 174.355 cv
301.83 174.074 301.736 173.17 301.527 172.677 cv
299.532 168.823 li
293.107 161.979 li
286.9 156.973 li
285.223 154.341 li
282.814 151.814 277.254 155.939 278.426 158.544 cv
cp
.921569 .521569 .431373 rgb
f
273.232 122.703 mo
266.99 116.554 li
255.75 131.33 li
257.839 132.659 260.214 134.178 263.005 136.08 cv
269.062 145.247 272.33 149.669 279.101 159.758 cv
280.245 156.884 284.246 154.877 286.9 156.973 cv
283.361 141.578 281.74 131.136 273.232 122.703 cv
cp
f
195.504 193.511 mo
198.591 199.808 li
201.505 204.118 204.822 205.916 208.24 207.077 cv
211.045 210.743 li
212.464 215.543 li
213.611 218.605 214.996 217.368 214.734 215.085 cv
214.109 212.075 li
212.276 207.32 li
213.692 206.989 li
216.058 208.647 li
219.113 212.003 li
219.73 213.425 li
220.068 214.204 220.876 214.67 221.72 214.573 cv
221.925 214.55 li
222.237 214.865 li
222.715 215.349 223.488 215.378 224.001 214.931 cv
224.56 214.444 224.807 213.69 224.645 212.967 cv
223.904 209.654 li
221.727 206.106 li
224.05 207.335 li
225.544 209.427 li
226.304 211.45 li
227.192 213.462 228.541 212.381 228.471 210.651 cv
227.726 207.794 li
224.676 203.342 li
218.894 199.202 li
206.625 195.178 li
202.228 190.213 li
199.307 186.539 193.416 190.337 195.504 193.511 cv
cp
f
169.729 117.07 mo
171.95 156.448 li
172.469 162.547 172.863 166.212 179.884 174.98 cv
188.095 187.277 194.072 193.521 199.031 200.432 cv
199.512 197.578 202.808 194.09 206.625 195.178 cv
189.164 159.758 li
192.888 128.6 li
195.292 105.862 168.898 92.7295 169.729 117.07 cv
cp
f
200.011 91.5646 mo
200.407 85.6833 205.017 83.0217 210.308 85.6195 cv
215.599 88.2174 219.568 95.0911 219.172 100.972 cv
218.776 106.854 214.166 109.515 208.875 106.917 cv
203.584 104.319 199.615 97.4458 200.011 91.5646 cv
cp
0 0 0 rgb
f
211.714 106.851 mo
212.779 106.236 li
214.087 105.481 214.896 103.861 214.896 101.555 cv
214.896 96.9438 211.659 91.3365 207.666 89.031 cv
205.669 87.8782 203.861 87.7693 202.553 88.5247 cv
201.488 89.1394 li
211.714 106.851 li
cp
.129412 .0784314 .211765 rgb
f
199.37 93.8206 mo
199.37 89.2092 202.607 87.3402 206.601 89.6458 cv
210.594 91.9515 213.832 97.5586 213.832 102.17 cv
213.832 106.781 210.594 108.65 206.601 106.345 cv
202.607 104.039 199.37 98.4319 199.37 93.8206 cv
cp
.47451 .392157 .701961 rgb
f
227.649 77.6538 mo
227.649 73.0426 230.886 71.1736 234.88 73.479 cv
238.873 75.7845 242.11 81.3918 242.11 86.0032 cv
242.11 90.6145 238.873 92.4835 234.88 90.178 cv
230.886 87.8722 227.649 82.2649 227.649 77.6538 cv
cp
.301961 .301961 .301961 rgb
f
241.441 88.4794 mo
243.119 87.511 li
244.276 86.8429 244.991 85.4106 244.991 83.3722 cv
244.991 79.2954 242.129 74.3383 238.598 72.2998 cv
236.833 71.2806 235.235 71.1841 234.078 71.8522 cv
232.401 72.8206 li
241.441 88.4794 li
cp
.129412 .0784314 .211765 rgb
f
243.314 84.3414 mo
243.314 88.4193 240.451 90.0681 236.922 88.0311 cv
233.39 85.9941 230.53 81.0358 230.53 76.9575 cv
230.53 73.2886 232.848 71.5863 235.889 72.7681 cv
236.224 72.9 236.571 73.0653 236.922 73.2678 cv
238.815 74.3586 240.517 76.2925 241.687 78.4824 cv
242.699 80.3706 243.314 82.453 243.314 84.3414 cv
cp
.47451 .392157 .701961 rgb
f
223.817 77.9802 mo
224.213 72.0991 228.823 69.4371 234.114 72.0352 cv
239.405 74.6332 243.374 81.5067 242.978 87.3879 cv
242.582 93.2692 237.972 95.9308 232.681 93.333 cv
227.39 90.7351 223.422 83.8615 223.817 77.9802 cv
cp
0 0 0 rgb
f
235.52 93.2667 mo
236.584 92.6521 li
237.893 91.8964 238.702 90.2764 238.702 87.9708 cv
238.702 83.3596 235.465 77.7523 231.471 75.4468 cv
229.475 74.2938 227.667 74.1847 226.359 74.9403 cv
225.294 75.5551 li
235.52 93.2667 li
cp
f
230.862 75.8397 mo
231.141 75.9597 231.427 76.1002 231.721 76.2694 cv
235.251 78.3103 238.113 83.2662 238.115 87.3441 cv
238.113 87.6796 238.097 87.9988 238.056 88.2993 cv
237.638 91.6656 234.961 92.9055 231.721 91.036 cv
228.19 88.9951 225.328 84.0391 225.326 79.9612 cv
225.33 76.2235 227.736 74.5243 230.862 75.8397 cv
cp
.47451 .392157 .701961 rgb
f
230.862 75.8397 mo
231.141 75.9597 231.427 76.1002 231.721 76.2694 cv
235.251 78.3103 238.113 83.2662 238.115 87.3441 cv
238.113 87.6796 238.097 87.9988 238.056 88.2993 cv
237.146 89.5924 235.445 89.8351 233.497 88.708 cv
230.586 87.0298 228.229 82.947 228.231 79.587 cv
228.227 77.3325 229.288 75.9805 230.862 75.8397 cv
cp
.101961 .101961 .101961 rgb
f
241.687 78.4824 mo
240.517 76.2925 238.815 74.3586 236.922 73.2678 cv
236.571 73.0653 236.224 72.9 235.889 72.7681 cv
235.951 68.6898 234.071 65.3634 232.572 63.306 cv
230.2 63.0786 227.489 63.7314 224.614 65.3926 cv
215.61 70.5903 207.541 83.3209 207.136 94.6998 cv
206.297 95.1835 li
201.467 92.3737 li
201.88 79.6599 208.189 65.6902 218.35 59.8269 cv
223.134 57.0627 227.237 56.8024 230.291 58.5751 cv
236.534 62.2069 li
241.934 65.3347 241.86 75.6975 241.687 78.4824 cv
cp
0 0 0 rgb
f
230.289 58.5759 mo
227.238 56.803 223.135 57.0634 218.35 59.826 cv
208.19 65.692 201.88 79.6591 201.469 92.3734 cv
206.296 95.1843 li
206.707 82.4701 214.449 69.3295 224.609 63.4633 cv
229.394 60.7006 233.497 60.4402 236.548 62.2131 cv
230.289 58.5759 li
cp
.2 .2 .2 rgb
f
207.914 107.676 mo
209.592 106.708 li
210.748 106.04 211.464 104.607 211.464 102.569 cv
211.464 98.4922 208.602 93.5349 205.071 91.4965 cv
203.306 90.4774 201.708 90.3811 200.551 91.0488 cv
198.874 92.0172 li
207.914 107.676 li
cp
.129412 .0784314 .211765 rgb
f
197.001 96.156 mo
197.001 92.0791 199.863 90.4266 203.394 92.4652 cv
206.924 94.5034 209.787 99.4608 209.787 103.538 cv
209.787 107.614 206.924 109.267 203.394 107.229 cv
199.863 105.19 197.001 100.233 197.001 96.156 cv
cp
.47451 .392157 .701961 rgb
f
197.82 97.9855 mo
197.82 95.1802 199.789 94.0428 202.219 95.4457 cv
204.648 96.8485 206.618 100.26 206.618 103.065 cv
206.618 105.87 204.648 107.008 202.219 105.605 cv
199.789 104.202 197.82 100.791 197.82 97.9855 cv
cp
1 1 1 rgb
f
243.606 84.4246 mo
243.355 83.4132 241.896 77.5486 239.164 74.1234 cv
236.433 70.699 233.149 67.3977 227.919 65.902 cv
227.261 65.7141 226.609 65.5618 225.964 65.4418 cv
219.961 71.1495 223.333 84.2373 225.964 96.7426 cv
233.252 97.0854 240.751 94.9126 243.26 90.6304 cv
243.26 90.6304 244.519 88.1101 243.606 84.4246 cv
cp
.376471 .219608 .0745098 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2009.i105.034.P.m005.c33.isometric dj party set-10.eps)
%%CreationDate: 2/25/2021 11:32 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OeZLIa:SgXQS=\'ZcBm$JQDO(F/KZ!upA7(.t)fY9^0:Bq0\A/!EdaF'*Aq8Orq"RUeOk"2HWHOP!$Oc2g[pH5ecdRl'
%ee='\,Z[V@rt<M*YCmk7]tY<u?;qEJG-%:g7]BV`lCEQ.UZAi;R7=U3C9K!?^Phd'?L]"a.4.6)eS=.57(QPQ?,ACs?2GmSWI"A0
%X&eR4=OIb?eqnYHD&]'u!V!^7k9ml!BKG]F*LI7o/`(iaP7G>?>*HlI/gCJ4/08\s/?sj-Uu@plI""(aLsP)D6gq\9m^.kB8u)Ac
%r0H&JE\9jgZRC<R\$%.bHkt\]7+OFMG,lWDa[FJ`^35eTEqoS[[^="P$sl??a&!lR(NK?WrE1HAImLRCDtr-^=:$J7F)[5[GF5Z<
%1D82lT2"tYl$EH>/;d"+Pd_RU>-W5'*kK5@le&6qX2U)H."N5j:>53LCZ>ATri$uijV==(Z]hNuj-mnWE[O/O@jN#bAsSpn*S!:q
%,4AUPqg1Kr_CLqcQD0XDX)h89(MJES#b@ZX&%biFosS2k^tb>kF60Fh29K5?jr$:QY8.<#KMWll<BZA#X`LZJ']5j4ER=b&LApR_
%[oOpVp5l/.HHCWbWuj:WM2?6\6"_fEQq>b$&=Xh4W25grrZYrf`V$Gp#*,@sk.$c`5j%sGb'Bht%bQPfD:;N:Yg]V:!tO7$_NFj(
%0To2p5?Il_Adbhe3aQ)fT9q!o]auh7ah8pHGHP8t1hsN+D>Z1!9Ml$!X#A8RYJD=?2]/:D<5=<EPLg7gTMig]n,;o_roT^j<4hY[
%:92cZmaf]&p\n>iPoHW-!iFN='(XYN`1m$*s8QW7dTd^^4KoraO'ht@R]HJZWf:V(@+d3YL^2I>^">r5+8c-IQ!a#R&\na.`/\0e
%6``"NELU:6,=W8nHH%&S+nS^'<u!4X^*,mKZ.8Z^dCOuqGH98sOE?I_deh'(2r`5]f-t"tNi?4^o;M*XUdbae\X_;:r;hE+&1HHM
%a/reWM!+%j*Y^[PTO#3V\a:VBrY[7*/u3<AK?R#o>-4=(MTq&O.?SLjgD>_,7\f7052^Yb:#Y!J:\\HO@R3J#ebAABT)Q4!%_XLu
%!@OM-ij\_Z%=/]c3(n2;Lrko45bLL>H=WYC^PflpL!"*\@QaKm4)IqIm@$7c\E*]MYu7TJ8&*e!0:&7m.Z)7V_GTqQ+&Ap48m&[l
%\)=Q_<U*s=,`]I$NYh1sUXhiV20!_8CjH.M]&upEUjW;*/Zc9Z=7?*!-IVRk:>9Itb8!j1l\WTiom3kI1@&1&JR4+_"u_*+L4RMA
%rq_$2YK_ED)=i9q0Fc3uL(,5:E5OD8pnWkUOYO.2*_]S<'So1+YmDYF35d*lOsV(AA4_gB9uA6RAV/TJg*SVdl'a%WD._"nR5=H#
%@1g\gW+B2Wig+)b<nb\u=Y".HWBgiu.&Ah5PZ*@7BUWOHQKDj%VISK[bI25%gL.[5gU0t'g<SD4Ah_(qAhhGE`gO_LQ==Qo@9Jn+
%Gn(s9_G+ofb&,E`k72]]MPk`SBCGf<F$/n.%WP2;=:W!nYoVtGa)PAZUn"fUEO&?baZFc5"B^`SZ!?S2"C1)0m,Y`qb"]c$j(@`X
%j_!<gI.D/="_^Pk'S)g]huho5@+$Kk?4&$@K#(Bgpu)2#ifeph(-XbKaf"]DYf+t?r%q7m;g^.dU#KR?%hg$;5*#EJr[6fW`;a5`
%N;@)8-`9.Rq767OZS5*EW^+-\b+O>A1i9%9g;k0m5p$,]o[4#X3CG/a-RM`KU(_/>V3m-@!bt:ql/gc/e/Ub1"<[;N`_f^![PLH7
%G$`Nj5WoP?kMBQtJg:dS.M?h;V'8W(MNWLM1aN`"8X?(rTV[!bKr@Sk;a=34BSu\/jU)&dZiu\jBFCb4;\oa;R&%!;as<NL8dj*O
%.R\:AF71bJHf7aYqRI55U_QVbI#/H$)%ihK1_Ifg0L[*I%&XA&%g+53Jt*ZC&Xjb771W7Q5^E\a6ILL`LiG8FWBs5o/RL>?j<Jai
%,n0QA6HYskE?^X0MbjWJW?\&HVW]6s*EaP2,^fgDa7/>gT0hlUSHQ;4U)9P[J8V*gPL<FZ6PDEN^HXb'$%5M?Z.+R*RLj0p,4T'Z
%IYl[W'7mHSS3r`7)(4YdWEIY);R4f(Y_#nNks2%MUg0-pGp1-Td&R6VL6S,3)RY7,F+GOA5`#VWcj&cVJ`^u<D&1J8GJLZlR`YXW
%=[4tekU#9O@/;3H!/'r<"(14W/6a503KR)V2*o7'Ql-6Ac9^Ne5Y5KAfh;mo43:Z/d-ACp*!DW:+sEN%A@'ro2P2dGAe$/["*L\Z
%,+m3Eo%ABpe4C"gd/c.5Grngn<o2&a]TLD#Ek-!=")91e,jTs\Aahg9EQfEE);.-2S:rntiD"2*W"In0i9_6@@DZi>9KnYm\Rf0/
%.@@.<1M.LDk&(2&,\)?Ob5k!KJ1CfM3<19+81D>i!n9IKTODnlK+)-3"o*%enepp""[4YlD[bR!*:Qo33%P6cEr^t(0M);;-?,g_
%S=0POblI40J;[irJ9;(+Vm$4LE4c5,T*$O(!GRXIeT"uV(p"F*oeKt+%$2\o=MYEI@gZ8cJMh#CZ4tmAKN3aeg3JcQ=]kDTXM,'!
%^k!,7TEbj8)6jX>#MGCH8kB,u\3MnkBZC>QB7XY?e?JKd)7(G/e%ksc"`jggaaie-:nJ%nBUF(<a"1%u)Q;*g)W`)iD4ju=ka%S?
%ab+ud!]?m,Wa298%TI<J[9GohKHP3LEWS0"b(2JO/\ieD\-?7L]L7kYjtnfjM)e;SBd*aUd)<dm\g?-0,KXd)[g\E.0^;d"MZIb6
%^p-0B<O$R#J_L3[JPTaBpuKR.VV>L6@NZXpodG7krgM+:%_6bm@lrZ#?mj_r-eo%hiIdZMlaWm$'Fo([YN)?,8"msp]oJ!XW#afl
%`cY,`\T$/?i.*Zi\8^&>i*Zuu\8^&>i*Zuu\8ZF.\3UVMFkdq/g&V]/FkdqOfDl0>3pmGbCk.-OgV"J4ra3_@^\?>&oD^kk5HM[$
%oD^kks1Q/ORK%8ds$99G3\!obi-e5d3[t[4bQ+J`*L-j:A:W*dCBi$<2TOIP@SE7kP6ghg1!jik4M+@]Iq%C&.gE24KIUI:Y9t*K
%]ja6m_KoN9+F=@1N3Rtn'6B#6kRaZ-k.?X@4GWM<_Ds?[h+3.mYY7_;Za^I)#C^Y$C13PK4A7=Hcj#24nc<+9=O]q]#'E9H\[aGu
%+'KMKZUPB!j3bK0I&5Q51rM9OHX\#pqQO%Gh'dX0HaZhhPeghppR%R2&rZe>Wce)V[Fj`N.];*_f3V(N5fZj)<UB*O\u8TO/[$dQ
%R#/6,H7/J"s69I$j9GC!&_:`+.C"%!K@\ADSUM<S?.J909"B!tU`5%a6napXlF/P!^g),Lo8??PBQV9dJJ/9UIq$4`cZFg/3sGu*
%-O2tQpEWaU?5-2VGYfmO(pIDG8HI9O=d,Q?r:)J3$/$VFV.0KAl+I]?P\H><SSmc#>P78-D`i4(;e+57%mD^u`e2_1g>-K`\YqSb
%$ClG&W)MrFL+/o088Z`b%husUh+7!+!G@FJWnslFQTE)mZ%*1*SsU9a)YSE[:5`sBhsu5>Jb.mbKV&/tL!;:Wa=%>6$VBf3SBqO9
%IIoQoA;N!sFrZU'VC0gWA#rDOFh2-jV*9jq+rVDI9aZuW7^lCgG3#'A3"X%1B]Aq619K:TpGrMjgsRa,Yqgb0CK^*WYq^IaV@K!(
%.lU`Vb_do@kH<V?L+@K!.Y@1pIGLj/kK_jJ@-5bi/HQ_UcHMq;(F'JLpZ:POgt\6cqf6abmQ\9IoIfr[Z%/5[?Z+E,"5[9F+K"%g
%97+FdlHr&*h"^cD2s=l$hiS7834UuK?Dc8#DKj6+moMqWd#-p"KY("eY1%-0R&7Hl$TCX-@&MXo[k#FDH8p#qD)]KX[rNIF=Iu0V
%MuuEeePr-5DMlIU;_Pg&B4l(b1P-QXR+M'9Cbs2p<O<gPAku"JIf0(P\DIqH1V]u1@Y:]<UhDC#2LE'j3\-N/UJ`ff5`tJUO`2m+
%YU87VG8T5]@e_j9c&Fu4X2S,:;/^Z9of,e@5;FtgN;*D8rb4:UhN\'L*gol\A(<Jr(athrDjVBH^mK.l(nCG)@/LrGN.33m@iR<T
%ohHZ::h\taVK&D6[@ll@R5B6Xgm5_j"!(=T1D&:rptrN"AnRH?g*Aol[;\.MQjYPOG+)lMo?rKuK/GY+iiL&%+AN%D3o0*58)diM
%:uE*nQ-MhClbqJ3SLMg."\gcF>4EC&b9n!NlA5<;k0!3taIbBHHBh%iXQ4KiH*),u0fbHK:4,OCS*P'pZ^>D$glrgJk#jmcTUC%j
%Nu\=kBb,"!>*:<FC8Q/M16"a\h=A4.@r0Z>cY_HkEuQABiuBlkAa.4NM!d7%,qi?h!k^VWBATaiZPYC?barX@osisCaBPu0)m/6+
%hAmG#8PPlt1)FG!0?3F3n@D9U!TP0lR1$2_j#u1KI+VQa`ho<?A*g\K%Y%:4Pf@Ppp^CfOhSFj7YpaDQGs.2(3%MXjVpG(W8@>&*
%Zi)W"n+p\oVj=Z$7IeTHJV%;j3amRNpNXQ.cR$LQWp.j9\/VG(#$K30lAPhhe8KIL`n3T#>SQLHYBo80]i)M1;?%l)JhIjKF7&8^
%ofk3?D3M*/S(1uiX*OB`?ElMS.]6=#iF6W2c%N!),kNJ3pQ\.\NX&[6NFSUGN`.MAVd;m4LoJXZNk41)MNa9E)*A>?2bHV7[sX+A
%(=UPLE=S2XAA+$@Z%CZfqA@$'oeJUA0p@aF.b/:HN1K7p(:;qs`rMr<.WoO_&KAMoJARj)"dV<qW!RBL`Mlf]HVFj+C8L>5A)roA
%MUg-],>NQ(W9^70.TZR%rf46I+R;)-<_TJ@HVOpDQ7%'U(lVEH=#uURZ.R.d3\_t=iA!4Lpe-Ug_%=Lp#VV6fq.h_`nS8j+5K0MK
%=fYDXUPqUMM7L&LUr"S;YSUs462$eHB2Pa3C9_mCb&,D]%MWMZFlo)?;rOC7mSYB(*+3A)Hnir8RATaq/BXE-?Ctl)bXa'QS/Prp
%R#:HImL5UhhO5201ZQ"o0hfb.a[M%T<7@ItE]96G?-5Tm"3`kDAY+hN-a_,\(M1a:SM:F!G;C$]Q:.6h*Hd]h;;qR3.i.fZkG#mu
%MeV@7]:+XU\kBR^EIaGlY.r(aRT[k6M7&XNO;a<fbLnM>(G!C=^(RbRS76XWi`9\HaVim5qLtp)PH:\hF)o/1U05uQE?]l'8j<tB
%=E`j[?bU!7RCQS7MHjY4\J>8NF1F2qCNI$E'65\VJsNsXG.5[Q%i9@@e`KcsIp8qtNO:iZXNdTq>cR`u9==8Ld)cFa\#0Z]0i2iF
%/_QQG!1^CCe_,c)fdI%3k%lkeUBo,s7`(1J^aF[sN0V9sl8pG1%"uMajWC[P:bDZ1\`)"f'*2cq[nmJY[Cf[QB_d?b/)F1'QbB^t
%IJCdNOgM9g=6sI-eN=02SJ5a]Zn;fE;rV0h$IcAO=INha..b;4o>3=C&(NX4A+hFageK/[ab[S4feABgZ/K%7!WR#PGPM1Wn3c2Y
%NeL0P"1_%CQYA78madqXJ&'I&9R^l\MoKBVM*E%@s,1Uh'CmRNfCrOIrePqqNgY(d>\_cWNAe;LqqY\$lC.9[P(FgOTpnV&&0ohO
%3@nVT?4?0W0s`Y?%)^MD+u!+4oE&L;0Pk)I!X#"]Fbh8`0.//gMlfV7U?6UXBTO+]Nj2=XWRm,2;^sT",B'RVigio/Za^Te`O28)
%A>&`i^\Rltm-Xi0E(Re>rpR4Oh>.'=I/eDBq`8q4s*&oHaaF,4E_t$TIog5ps&W<`\-$Oc)_iqdq4@&>#(WR5?8CF0SaZC"pO'/\
%PK'gt.q`MN[[1^X_4IXHTs;<Z-:Mac]kXtFpNR7MQ1KnDFBC,'!R;Mnp-(/bQQiSC3/Uk\514de<^R9mhJJg7D&X:mB_NsBIFG?5
%'mng]V%alC]7*(_*[."Ca<hcJRpXu5O-%U2ACm]m(tS%99K#=J1?k]QS@:Va^&_9/[fO(@Eo,ID<G>FGc:5u-D_tY:qTsZXH2MIk
%-$Nfd1VG:9'f4\\l8p^(m)4FRpi!"[m0pU(0d8&gcO#A@Z5!t-.%jt<BPpFC3Z8/JTkBPT5oAG>LrqjT0\+!pG1.smQdWIQP62Ij
%%>[;m$M#\M@f%78C:7$Hc2H)op\%2Z#*6t10D!!&4RdB6p7)@ok(/kEi+3sSq;2OlW%a,<]Vm6;Lqh.902q4gc3#_$$+rr,'],BC
%T;`,>*@ZbVVB\WU[*ZbI3D+Xp+NllX1eGeGgVkN!'F:*"@M<_g29^tQ9Eu!t@M9CV/:N?0oP;KO]ZO_N[X.,0=;`#qT.@r2(221"
%*9WTSVF*Ah.ksc'EkJ-Y2>%;3^-\5*h)MURFLN_R?"%%%eX,FKQR5.uWSNc5Mdj6ep\^2Cs-4csGO&4WN7qJ,;u'@%'$U8np)"T7
%Q=J]L.QU:][,SkT9QEU1ph/=6A*Tmlj6Wl7Fc[PG?9+lRSi*+s(GPhAq>gP,Fml1`0Pr=]="hagHY@WK6R1)_(f-iT=3@f=[T("5
%krW@n!Tq7WQNlPqS.mr``/Xjn**[00VGoZ#iY]':ZtY.P`k9sp4H;.KScG8#0kSM)RJAgsEsL\AEF>0S0rEONSMd"2a"c^rN+lLa
%GoU<8a-_uK#'ssR@]\@b\USc=r3N_1Z.(4'?T0HSd^%tU@hI`357ruL2k8,K)'EBV87na%9tbPrWH:bM6D"kY)>bFUWj.R\7s[r<
%\2Zp(lJ:/XYh?3^:k^u,$7I,:UJfEPZ0gXWhTr?+0?%ouHhpMoCX"@lq[.=LBP:^ckf-9mcg(uKJS/;%kZ4M8?*#hm,\()&e7lk+
%f,Kp+,*!7T#DshHZ)>lNNER<5/%W\V4DlP1EL!gq[h\Zum^>m&<M5f6$jt:\T>Y`b-[:"jQCBQQU"ZOfnsTeUj*:NH.H)cm0Jep^
%'aL*T:\T_K_Xo4&"Y0@Zf]iD2L;Ftc;!<iob@YTQ!<JY0ib'JO+!]HP#".q#+,Rs4dQX6!EcYT*nhPU\c-<r4\Mr+Jc.neXHZQmW
%>RZ6qm`jPkDse+4LX#e.g%"67'Z$/&IkCq)F*DNicHY1U\NAEh/9?"fL'M8H-$LsW0Jhb7Xcbd(d)?)rqH^],NCN`V<K*^Bk5O.A
%nE95nV$/SIl$5RLaZHIV&(&YD2/k?Y=(5JXF'_pW#4"lT&@f=s]PaT3`aj\K<A7M9Xift-eRIc`,9`Npc!m[#q7Rh"[+=[CY/Z;r
%X+$8,]9npTcO:o7KP+?<.$'$?P?`4mU7;1bnBKGf3TDm=gcCgq<,7D4QC5?2gLg>s]GT0`e2<JY7U=g4*QLh:I:?(Wp\.+XA+!?>
%1&1#^.1uihpOPoP(]/rhUJ`h4)&MO#.B$_:bI"m`ZXV%7$WaY3gk!-S(pU9@SJf*Ts.\=2?Kd']W6XF'iNJX-iDAEgM+B.O3%=i2
%WHD]fDu)UE"clJC'<'#o>NSkm,&Dp!]FEPZgRO'2!X5FSB@<6\lh8WZ172h"i(A4acAZlW_oUDZ?bo7tIq3$X`DHDW[^gmVNOj<[
%!/!f(7a^!>\j`B-DA1k$7#hrlca6Pkk<erf/OB2)B#EC0RKpHCd?;*]egJ*IfP+7E'uLm!**,6M!eWAd0FZ-!Lql9R)hp>8pMtk;
%\(I^&/o"^o$OgW>6cKZ#:;:tbCIuUt9';jL)<sQ6Q/`PdZtWU%E>8=U3DRUUba%3>3%-SU+QFu:\Sdpch)L<)jS<A>dq\O1NpN.(
%osiOTbToX4_&>L]lW3P\j\f]1O82Q&-+]:a^<Puf::hdT'k+ThFU_qLL6I:a5(gTF/`WN>?fNi.mPkSpId33L%QrPgOchWOSmAbO
%g)J"Hdk)p7Q?@:N975OoM7?.Jd*1+_=H-_t9mr._e[nX(j7]3@'*2bG&"SKH,koW(Obl/d>PDLgD$K])Y$c`S]h#r@"C.V[>:WEr
%-T4S/?u;d4e4?*fBP5bb%PLe?dtG'I75JjYh_fu`iQQ*!/$0,t5Gi:O42oZ.X#h!B8M^r'`%M+>(H;7/kriHhP4-spLGLAKmLkX.
%H,<,-FY_^>PM)bRN8/hiQC_c1Li@A'8FUW"=DshN\Og3:C&ZD35-B:[@-XL.=#2sO_N'q?1g*It*r6_\3[3Z;<NXP0SGu3bo+]C&
%8[5q))-l\EUkR;N0huc^Z@<aTBX=u.jE75H!2G>g6`[4Mm@@>DiEu$OosuT$F6%6EeLpd305`Or$)Pe(;_O8NFk[^h]je["m^3])
%XYS+?glDd;CSk49<mIQ@;dGG'NTqG[gFZ\>pj$^*O]2tq+JR>q"ji"J%j;cJ_^1R/AC:T8%.PEg9URPUo@%pFDlHe##Rc6nJK8+J
%)h6JY?c\FhT7Iu>+P"1-jh(dI&M/9.WAU`JhoSFUj$,TJ#sTMhfQ%8t,e7cZ!)o&#QT:B,@[JKmP]RAOW-[et$6RVD;BLAJ?SCBm
%%qthZ&<YU<I/[k+b4ji76f\Dq7iA0Jd_V&P_h@>".RHC[a3HuUl?,.Z"QSDsrk'%3+2[X::.k_G!D<^:LOTnWd3%fTF\j!0V8`2'
%#akHK0"-XHlaU'.%)u"^f.ei(P<#/EnAR'i,+k^?iB$JIZ;$\Fpk09sR2kF0bCm<p/_<Oh[k-[f"WfT/`M]Y%*<ojj:+X<&.3r2S
%>2i$V'6E\6dioR:r#ons'&Si.Z<_rRdr]CF4*,-lI*-J8.d/t9@J[,U7`96?71Vjm<t+6,@)TMOd4"qO#^!U2%**&_\gY:C]#;%r
%j>itTqj9'3"-Hu1C(i`e9RUQs``\I4QJAi-_bh7\L)Aep/g4\eKFqH*Jl%X3?P%B#e&3t8VC:G%+sm0)Iou9Z/HZ3mAMS.6Y'R2S
%9oHR3&Z]=P6lIk<:%1$K@kiR""TPH0`/;GsYi$cD`jRkI8_?;#%^)f@j=+aS-7l$,kum\.;<)[,j2+#ppr=K.G.HkqqV&jjWl?[r
%k@-R&+I7k&T`0G0NXQTc#l[QY^VO<.B9$IE9tPTDMns7%5.7%fmh\,F]Q-O?S&Tp[/ommBpqm)F`OZlp<fBU&dUVs!d48_cK&aU[
%r)X>RO:Gfi0=e54l3e`',3$:CE69g5;6tf?+FZHL>run&EN&mR[OHN+LV5uJ3nl'*CL4]</Tq+G$R]`$!OWI;)6o9s+_3bIpj'A(
%$CuTdoM5p;6Z3iS2(kDX[/(S6(*D/_-bkP@p;U3u+$/Em@mar/Ctd9$B-((G7X_pZ"T>?[d\Sn2HC:.Wm^b.g!1m6VGer>5`,t2N
%1iq`#?41FU!#k9SP=0D=Ul9Ds(/Ek_U4P,[=I]t9V'f"D<u250^Z(.TloQ3jO)UDrm7sE7"leuO8T_XO7'@&B..CYm9)TENF#6(Q
%nk[TpDR"6Zm-cBrmhq5Jm:rJ>GJq#UE'*=<(?"<$.oo0U*UCFY0pCP8n7dF!Fd%b>G:\.3Xq2CJ$!e`=GmJ7h5NZ-Zi>[-h6-`n2
%TNX3YM^9D5_oKSNp(3+K`U>7,$hu:/BT.Q+[*\nYUYq\cp03gRnQRDN1Aq_XNEIFcV;*p@\!'UC>lj5..csV"3lNik>W4>SpY(gV
%=B8:_=>UiZ/Xd*mWp-PHQ&uj>Ka'ImiMUi*8a&YXQZ_e8)r49K][c4(8,'-m)qAE<97ZgaI*hlLDPC9MHEBTI;X7A9K^=4>YtG=c
%<1:cA*m'2h<m&ef?XK7je9"$JMlk9=UY%%D`'kOM'40PgH<.eqTBa4.gTlSF7c<[*^O0PK*:>q4jNoa(%c$WM$Y+r$\e8U8QJY\t
%gG6bEY@@AW^aFsij[%(*H`^X]in4.+PK9">S`4@[>3YtQUJ]Fp&)r/Jh/+M0YbW;C%dPXbkp/Th!lLX&s)Wm'rOc>spC[^jAsgR`
%[3D.<h+eVsn?CR5Gcf-'JoVKZ*me+M6q!/-p:U+<\-Ml[$eKK&DH;q#'3.bW@SJcsdr/t:bN3%cY8,fY]kt`'V;7("G-fR&\2C[`
%89I!'J'-WP3VG<]@RT+]Cn!16(;m+n!B!+aa"\Rg[@i9emLuJO7GM3YP_-G[g6#\bEeV&-Y@#%>EV:PuPVFcUrS_O@BHO$:Yghuu
%Nkfpep[o-GFKUb7;f/$?X+t#f>AXmQ4X$C,d=MbLVc\0dS6CSCK:0XI5Rl2I9LF=i!Y:6Y2L"0=iQ[/PmebVkmD6]Uq8oUmrsbG>
%Z!DtY8DG9":7Rckl!;R6]M@pUb^o)!gh;FD+Y56jii(UJ!iNL@@L"`ps3#18>EuG0nN.\H1LE1n3iQ0F?D7NgVME9TF-RS.Gi!P#
%.")^3n!@+83GQ1TC0^U9e08mrAhk>8]hIhU]@EpI61;H%&g@06@!i_.^KBr(&holN*nkdb<#ras9b3QeQa[&(lNEJgm[m7IHUm]C
%PTK)E:[1eUnAqZE.!>T@6DIM]U6'5M%YG3\^Gd:fC[G^YID`fAA)%2o4cg6'_Lh0[(plgm:Q@]-aheaOnkbX+\+pt/nC&<4<7;JZ
%\u@UOMtS[ipR"B%<@^d?Fr1G\#F+%)P&C;A_G@Ol4C.mh(^CKVEi1;mSFf["pmJ![K+1Q&6(A's;JNS]??lO0M7(rp:@raoX(`;V
%*\!qgGI)$DDMQbOmbgWms0[&k]'5p;Q+\u0Nf6<F@4sZf3q"R'3=a\Zh!>-G=UY.k[3(CWUp`D$<]farLu,k=3RKH!e#NX7hJ.BH
%OWu]oC\tEc49`r6#)F/L:FoeVW[5])BUY<['S9lNJ/\8\pe9@:R*5'+EOo@=CEu6Z7!dI1^R)8&(K[fl;+.(:>;Dgd_fKaff.N8b
%aMs4GZ_V\4a5Ha"d]!tD&Y^W$+O!5Dn$YAeEZm72SCu7LeV^KPG2Jf63D5"U$n9=4BF(#nK;R5f<0LlRQGBq)>(al7m]'X8QQ"8\
%=g!=gX4H=WU0/O!Wnbi)H4F+&:qWgcW.fdtlFg@3\TZCV#;-8R%0m(X8s8VhSrj9t+^eOblWL1fD^DHW&EENQ1pe',4''cHe%6?`
%MIX4hHSE#+rM-.mPQjf^:7V;YA6Y^j>=1pkT<Cc_RJqDpHBC2"<s4(!#&C/8(#t&7mFOi9U76,(a"VtqCKJgIK:MOaddU5TN(/gV
%H8a%ueT"2H$J;d$5%DQT^#-S`J6Zq;COnK$X@oNiLLoqI4#REUm-<=-V]p1XX8%8%>NKCj<<6$r(j/[\p,iFGIaMj-)n8KB]8:A&
%!A7=NMpIT^Bi&s#]==6+3i&6)'^^r>[c=PGOL@g,C?bHuTd;dclKs_`%%TGEC*^kW"A2e%C9\WY*NJ-J!//Ygl=dG_'[G@5N>YhC
%8Q^(u69N1),PhJdG:K/6M3=`!<3q238*cj=)NE,"j#WH/NTR`7BLc(<oGQ8a'hYPJqd/nE:5c7JW!/-K+<bS8UN`W`(NUMO3NR%+
%Qo1S*`985c,Y$td9Et%7=hU"M=3&BHfr<XcCXbi]5O@"iT)(Q`%9fklJ/e:J!tCDOfTg-]N`u'uZL48"d6A].$f+(,5)c0Ylj1b3
%5%_/O_=<CHJ:lr'FDP:u_*d`^@1.F-*V:`F0Y[T0"39`l`WsWbJ""KXk:3>fW*?=[@^h,74n%\tUn^hLTlA8L[1,1>#gA[=T^YFc
%(#pkig_(4iK6fGEV,7jqoOs:hIaOqG*F\A$O1#C=M(?>h7U>r)kERRR=t$mCb\;V_`Y^8b::F`3(X_WO>;(u1/D3UK1jnR,4>YBo
%Lr$msh8VJrV-;O8>&5;KU_CAN$mRB7X3jaKcXY4#fL-^d%+#<OZQR1GA-+fB;l]f1*.c1-cUR*7pC3nSHqO-/6t9`@[r)HJ)$cFV
%]]t("3qGrG"GuU#(XT9[[5s.R]e$WrqR.^RfD:PrM:?EPVc>:C4XltcgDco[OtVa`fTeC.U-ORg`ITJN&QirSdBuB=/qSE7/8?0E
%d]X[tk7ig7iW]dFE)TW%&rsS[&P'dhqYC[3d29d4Kd(HoaIhZP-L_i9gD;sjO"<j1nZde]#GFe]N'#,CeIZDY2OYYCV<IK_Cn)jG
%j\OhOEUJQKa,t85S]S9]70gA$8"&1=a3JuWbRD<pl1=koT9hLoD`uc%ITUl04l0O?Dmsn)([L8Wq_.R8<u.E=.`Grq&UXC!`u_C%
%^YO1D8"Zt$^-(*'DKST7T/653"[_H@_e<\4AC">98)#!?P#&PG=.8ODp+(1n?F.=B\DP`J??Xc[0A[DO2lV"cWGF^JAWt4`kC)eK
%PX!"mGrEFAc9L]<Z9Q(#l)3's<39#2Vfn+^(X(.W_eqY2+2(JMW'5J;YK<@R02Dh5p5$=nr8!jg?W+q4jLaAh%JO*,]"NBWs15o#
%:=b`;.gt22i_K:X?6es)s*h92c(9?3cdUG3lA,&=oL1-K_*=%f7_V+4Q:Tutp?(ron)Zegl#u4Dq6pQUHi,\3>Md&c??L]Z8fb#t
%XNO1_.$hL7)Y_;3E[b(qh^i@lkfLhVC;G5/S:80BI<dpGjD@*@Fe:jEp[[:^7]BA"`,Cq&gf`T&^7#mS7Gb%,qS$;3p9L3k/j+Wh
%g04L(9bi[0s$QjQ[PqN!=R[6;na>^dWa:!L>Me)g=Q?eB>8>H8g1OHd<SAbBQg;R3ZBTdjIKu8#:H\X51<SpJbZYSoRI"cBY-*$6
%.R0k'(d8]N[PPOb&)ZPN>T41pAp6JGLX14BnSNRC?2=*'H2@$2)#%0]!C1tNSj()(q97^%2g%O=Zh3>l>?(h&Y$<[%f8"_+[Gp?/
%r;G_Q/US#F+23S/6l1*-EVa(0MEdE!jYt`!c1ebMZ@?I4pK`ekIPc8"Jj1*qc^s6!bj=rm/N(oPXj)jrO4W:-CAK`@nb1G?ILYpA
%^\"Gn24+GJgcEA[*YiPcrH.a$TKDJIT2YH?r@"M&ZTjb^B5=]"k).,*O4*Cem@2?:fop'Jj,6e_Fmu?:QT@#V,_6[0qXG^k<;r-Z
%nGRXaa-%_)#do,n$q><<ajpj5BHJ2HZ_Lc.TG5Bt/hK;7\FEn.&rmC(adnOTGA6p4AU_8A\p-m"pYJ+NX5qou(5!?L]!@iD\DMV;
%)$N0^HAsDb\2Y28An-+e]9poF8_SE'YJWRd7R[gZN1Dl82i]s1;TCFPh0s26XC_b2HM'M0mUP!+b-[e_8u`\-h*]f;00X8+AM2Wo
%Vqe8Vq)%EF=t>>OYdNH96t4))7q!cfnra9IgKa]K8!\RgbjPJg73r,uW]EX7CTgY5hpQlIbh5Y0+KnP`q+S?m;+T+9l`cSUZE<l;
%i2fl0qNQGKr,A]L'(?g,LUWo3\QnX^?#MVufN?/HqYNb^I!baUi7gk:Vto9#FdG&NlQ2R4m"58,WO+0LLsFPs#NjIPh%p)s)rCGO
%)Y!CX&e`mSo%(u[0D/Pq^OT"ai7E\"e"+cU\X#;Qr\D)dfilVC!R@:L@&`2"`qf>?j5"0.kIgTjYM!/=EaO3Q1ik1,f4P":>Q4[2
%hfX":bFajg)[)p8Mc*55rqrPlZ?#8&lEJui)Xd?sp]<kB'?Uh=SgIC>4s&852'IgZ4.L+/o>g`r_Tu^);'A^WB?sIO^-u#<@6T1H
%FT4Z-!Won"!GgAd4hk_E^^c\CbnGF$.B(df7W.=tZiu85o,_$3_kZ=+>Kd_pVN+]cl^:B,9c8MoO'RdPY?nnEc#;b2-1S$dk58q!
%p-7Eg?:\.))G+2;cN0e]kBZ/<h0sRZ`XcDB*KnliDc>6Iqi>d[d\C^uZBH_Rj0rYdl"&!,:=l,%Q,Usg^[2oO-Mihj.baC<1ePiJ
%GZ+I]NXFnfr,kXpm_9otD.u"0C3)8YmFCQsH1Ir&__.E,Ts6hjAGp_KZ.J;L+Scq'@<@HFJ,7Lh-T4@/SBc\QPF)J>!s>C\A.VWF
%1JS;iFGt&U@^P&N@Z4VEiM6^l<W&hYL-m"N&LnjU^g@6fcNA"+c8[nBaSP_P)]oAV!i>m32T*lE/,3rAqSlj#Ss=iXoIP`E#k8W<
%/cZK^MIL*h^_QbrL@S]b'2/I6'4&stK*ZDVZH,UqDa%FsXhgWedKYk)%,/MB"Wsmt?@"&%5r03^>7suQ5oLtP!S#bIIh5q5=;G6'
%UN*=>;BILVd4q4_ViqFY'u0IT<Nf-4J0DL\/FBcoGXZ757VVqHD"ppknAU2/<<Z*'i)5LQ(YtcVN$K<mFX."+V*Fa]6./R0kO[of
%Lf(716JA=:"u4:gk)cEfnP(We%kD;]P%Po_Ioo;T\uC#@nEg&f(n@du4o-CGr9dQJ^J2cq]Okebk60.@0=$\YdXAI+R6TpU5Mb0M
%%dl"5hL0XBFkc2VOGsjX'RJT6E'GU]oGaT'"'Tt1jLc'@*1BrCp&o3KV9_Nb/\^bSOAB#GO'W/H+UZZ'E$+!q:?/1eF/pg(2#HS6
%:E"[VqSZ#IerS[bN]Oe[gi?h?1&>ZC^[3X1[Eij&'Y%fH%D/6nJ#;oqklYAI.''Ba_%!oRBUqS#%9Xg$U\+76`P9&Jbe@mVrB=nF
%Pl9V-DX,dL2eYRZ\\2:YghH5(/S,S2=;k07Q_a(R,Y,H^U\tO.EbO&+8)sO7=79/_lqR@jX`EnK9^:EZN&8O+o>0V;hU55%$!n;=
%Q3'BAi1qUs+gmrgrcipUWVg.>)eZR4F"i$7&jXXHn!kJc)`YI[^hcmamSWXm0GG/,)XVE&*pfjJ3-^`P?X7t1hseX3p)OROr?n"k
%jc>h;b-S3m[9c^079l*NT`/Icn<QqKL"G;AKieD$X7[%!$jB6"MFKrh)<Q!&IO<0"i.HXu<HL>)pE8`?KVn$@HET((;L(;&rT'B9
%h>,.<^h_8aL:K\GHH1GTJ*BUe&#1O)VdKB#:%mr@nd\4XI+DOPk9MPbG8=21.tuWbc,Z0gpl"=MI=:rGT<!1NRgX,Yd3Ps,nn@Es
%_b5]Mkr/k%!6rR<CD@-=IU#FWH%#<;T3Wr4*s.mL4>utGp[l6L]K0m6Soemi_YeM4CQl=(EdrN5g!7]rVQ[0p=N9F&o]=pb)#abQ
%!V<I(<9@E]dbMDUr87egN:h4nC7n=IN<oOu`'r$%*:WZkI^Lr(?AFrYR=)@=r*AijI`!nthK\_`!P"L5pS3B0ViGrC5@A?:>3>P5
%qlX$+Ym=Ql?.20X3tjiO9RD69mY[9QhggN:f6f*c(ru%!8X#Z^DnLL]$jG0T]D>pqXF'F]Fo8]C&`0`u2=b+_/XXhA<F8f$L,q#[
%<m<SKL=$J#],k`G%Z_BhNNG__E\o-_-;-MISl5#j//s@VJo#gp"J&m\W,C\&p*XqWfuL9lqhL+B%1%qt#dJB\E,m*uMJMgB^$K?p
%LZR(Rp")D\I@YN)*ouW)'hnfD>]'IV<3g9]2RYJ8T6P,fhRDs0d^GV#:3K9ee+[')C47sEgOFrm/RjaQVWn&^oa/unfZl'5AS3/$
%(/Q(c'RTKAVmF)9rb#g&m)A5bpA0PlGUP#UV2Of6@N6;opu]^hp-K0/dc[X2YmBcFVZ^f1Bd;q$pC"jX?k3Y;+h!fl=3#XuK(nk\
%e\X%S^?:Pt-V"&Mp?Xbs!TMm,A$;B-[o8o?V1\&2NtnLcRHFsE+C3e.]Y4%8?0\r(NVr"Cp.p0ZEP&XDG#JX$CL>[DhjcK)p%M7%
%D*h9ae5':a5W=Cp@((H.Rm5T9=R1C9q<V`'<r2anp<VnJ0DGS"X.+-)S**B6in]K,K4RM6mJ,)Tebimo?0_6FS/-:m?jpE(ihTqb
%VQ2T7%#F':'771%s)EC\l&pMR<'RWGd$6\2)Gc.^&ma)3jjTk#>s>B&%JS>8I)]Z_WT.fWUoVd.a"USD<jpWShc.RhKnW5C/W&;C
%XjW!N^c^;`eD]rkc[Gq@fZmI)p=e9eq1U#>c9CT*?>&+XpWZ1)oaTf[PWi`(98<adqVLT2Xo>ebpHb2aDt8f>T,69!?h,4K+KL2i
%!kH!R)m:<ZcEcUD^J_f&9P2(2W]U`FP3*mIG31ZDp-*CI4^'g2,2^V8Y'k%Sc#Pg'kP4SBU\r6Oa%$-gnsA.@+.\Q#>P=h6Vis2:
%5@&roXR@`FT2WeNO7,S0k4u/EDF"H6'Q"P[8Ci9>)+#W&*p,8XY@'G0mp^AmT3XIcr@k":YBu\[*N-DoGja#Kko,)?2MQB@]hh+(
%C2()iEpT94i27U1H[`N=q5fG-7-SIBGW]@B07EYlo.j$)5'Zs6lO/+R$W^j=77LERIM&cogjKY"8ZiY;5doK6rV.!-U]@W94Tl;T
%P8fIc:7V3bo1L/93iQ1&8NHFoX]M^LflG>CM<oK&g_N3>mpDXkdTDCf`qKj&`3TC!LD7MHY8]^3BC<rXp@N'1_(C%QD<=dIq?%<s
%m3*An!Se5kJ"9a>P(!"<F%tA-k*r-rI#a^Kk1<Oe&+lm9?N`f:]Z.DNWFoqRd'U-k`Tfd^.&n=>!Hu0uU0p]-?gU%m5Z\IDD6@sk
%53B>6c3Z%LrA9$(km@GUpFSSiR_V5?GMpO):2!nul/IkJ5l!/7VRO=K(OEOZ'HT1'Mn?B]Hh$4j_gM/cmjPrtU`a=,Hfs-aq@a=*
%;HZNZ/[2k*7UV)q4j9_[^DGXoX3%3SYJFP+G;.,9"a]:3IV*qORA,W(\%0KOkuX)uU_dB-Hf^Gn"Q84gO2G=G<(NKOB?(+p+AZ=0
%dBS.cC0^*i%D,Z9=B885mhCdm!'bB$=mR9hHC<IGdE\)LKq5CW&C"cFe@AN!Ig$J;IO+7nZ.1:>BXYU@:$uA)L5>RA>A</j0!-h3
%Np$Oh)V\8sB=[!3V0?YrO1fo[L,BsOG])Y&<ZVBmIQsZ_<I(ouQ=#$Ij+^W=OR/Gi&+PEilKGU#-65^B4ZH6h*]QAN#1W@)k"hU4
%"+;D#oA81Pnr5U*#H=Kd>I.\QfWFLXXjRD:QEJ%<X"=:!Do!H3($r,B@\>6X="ZTT]]RqpE88H:.<jKjYr\c>n`0@NF2dU[&(7lI
%a!%#@;d.6hH2dXB/9`D)#LG81L]RB\70RaU!Xnh`kta"RG@15>=pWS!XX>4]O1S+>9tP+YKtniB\aH1bD:&B(R`nd\5COSgB6VO;
%3n]jXMg=)Rh3C&tWG8[b/>c\8na:i(lBf#o3l%mM$o2^cL"goU7d=2L]m4o*3jVd1@H%-igG*k9mqh^%Kn]fUQI>="lYi]Wr:b,A
%%4TQmpZ=\o$#7XVLU7)&]Yqa?EVUJo`J;G!g#M3^ep5g!b+DXsCXLa5^9*pCMR9#Hol&#D\>-Fd]/J5<h#\gP(/skIPD2`e^KO8j
%47*O?+b68q>Pt_]?Ma.6qs*:pT36+(gOin]UdspFK%`D(JgC/t`n!r[+3/dLT68!IHLW2/deUJChgXQ*7sFTmi"m\U[,5g&g3S,=
%_LWN+m-K+?NkaXMO&PMRkP!q.O!O=NR$M*nig(c]/PAhi#A-3Y<bCLRoB+AHl<q67^=Vd2U<uBKIM2B/>KRX5ZVN)e-,+*T]\KEk
%h4,S8'O?`LpQ+mDX,8?=2>I6I-9FPG8YdASilBq`XQ?eEPh=i?"(oW<eSMskg&m=\]Tg.cfN_Eg9@&^_+RG-"a5nE]6qTp+kaMfk
%HRY#$2S&C)p,jT]<JTUi$I]?1Dc;FN_KY_?kL*qoYspRJT559`.ppd"iE<K&KQIC35T>3P+OZk[I/5UFqS>5r[X7^WkMo/*]+C>n
%)\'Wt^Ha9S\-:l>2?/cGhRn(C#17K'fWTb$`LQjfWqg83K2f8#hB%p5J7[W@j;5l]Gh6jD=0aLJT,D&SAEP:Jms^k)KSIQ$'_m"#
%i-o=7[/Ar[kOn1Ej6NuV1^sk@/'4E,0WKN5dnMa8V-\RREWQlhP_(9n;YS!dBE*[.lrknm2tA=Hn()iZnHV,#20r5IFJ/)jo8EM[
%gd?90PP,5pZCOtTB6t(d7eX/q.j#j&[_;i@Yl:s'DD+7@`7]SA[dd]'aj*6P7EtRr^k6t5.%,Lor6Pqg]%VFo/"Ni-79[QTo=8V=
%4a;pdItEF1AgBkFQ#CSg>OA;J1].A<dkWoBCTGER,N\$>fu[*m`RMp$`n.\6?JdmmfrsRG9oKH"<O^TPBHT>Gb.rgu9n565V<7?0
%G7)S;eL>eDZ29QdQ^)W8]__/^RCg5&?G!/&MiZZbpFVd!$TsB=-CN$TcVKX@QCjIlArT<]FeSBnqjF>b>_^r7E!G0jmU3PIJQVsH
%/BDRcVV>ZNAXd@Nj&*MBI","mHJ)?hmf@]srpP2n?h!YYgH3GtdCpSl^Y_nf=H,%1Ze2f*O?mS!,L^GG2-tSa=.@1?Ii)VLWS,8:
%]@CXt*(akO&iXt0'_"g-ZM>/^*d0q$1+j#Z4`2"(c#Gn'lrg=TiF.gFLKAS1^Z<`)fnq3uFc&G(X`EcJe):Co6Uhj)1[;nJWhnm`
%G^SJX]gT-e,ruiK660*$[(Qt#ODZHF^@:EEFqG$+;62-aOd<q,HDrT,4AfqTO$RBXY"4dN]PWRXiSV(k/i)qb7Q8_r_P<*:_CJ^W
%(GQ@Zk]sF2:K6WM\O;6;<YFn2It0Rf+OOo]5UA'\&]r897("G8qi/"I?qIDaOt8rK`d8q<_RoKB3+s0<-Jto]#70e8X;bfgKIZ@W
%[sj1#4!]RmVHuP*\^[W9a.2MCX)dEp?]C'UUISC@%\,2\47Bl3G89T8(qgH;kMC+;m+@\>*;bLF7a[a%r6!)a!P7`M![].*\_:_n
%K4ATtcg=u>(<'+1Pi[t1IRh(m+:h&:j>glR<K0%3l(_9"EX:'3:6Kt$fT[,B.Xq*fi1i_eW4b[6;7^EuC0hY];&5rJHCgdBJ<AA]
%L-.8hDN'F-]go9R0rgm;_5ku^"1VZ;l>ZssJLhXg4EN]aSD0\O<B#j6*j7gc6c3XF!>8Q-Z!os_om0k#K.*^1)YJ.3T^e,-VS0S)
%]b`gQ3>?+NgN"W#^DFcZW:eh01+7=Yj,7gBZsKh5`t4;r6BZeX6WN5Wk[@:-@U5$F;;:2)N"H80i$l;^K\+7@6V\lG09%k&X3n=O
%24$cQ7.oZ<-p!FpTL#@Qh.U*6Ylr(uC`:8!9)S)-9-DB[`XYA3W0S^k&-4t.JTe;[7-_/<+&T]iRc8$6/[\NR<o^R>.278Y^:'`?
%-ugqrNJ8.H@0E65`TI\-;V9"!P/Q'+_t$jR.fO.r(h>V#Wmk^rN?YEalc/4e_$b@=1Sm6$%XsbBZGLq,*\'82e4?A[&V.63F_WWu
%#f%+kI>iP2=pb!^U[8(eY$Q0WUpY9n4iLJ[lCC:1:J>1X:]Utc0d$+I@/NQp9lS_C-b5Z`hr3qrO,o15]KPbP.e(#K:Ka\7[A*N[
%"I=)9h+<nN?/H(Ak@&T#QO1=pVl-baS4RX%4*9rgNgD'uQ00[fGTliU\rKhkq9"7rV5i&j%l*$)a;Y5S$JciVF7%<U?<i/gJU=*6
%O+^c'pX'RqI3&=1h#uR;A`@!.#od(VVt^0o'YP/j.8d#O%)^j)Q&L4)Rg"bohC$ZSU<klNmVi'hD`H,X]_P:WSG2"2H[g2:X8'uD
%G+"q1ZQru;K<,]P4%\2c/5[)J:6IAj-<<jY25#k!&r$=.c:sT9N=KI$BI$0mZ1&AngJ'G@ksgH>M%U<68CGGc@'b\K^H'Z-=\75<
%Al#1mZjH1CJ0ce2p:LeP\`o4>[%`N]L5Zt#-E1RF@@.EiDuo?=_q&UCPlW9KEEGcQVUMLWd*?&E;SGZ'(bl:ihD3$MD'S:I#*J*r
%Gc_iYPaP*X:c4r>eOgau"u=(Cf<oGFaA?b?,G<(2"Sr*V5`73k7B@a\EX;`6L1scs0a.Z_nr#Es,boIs#dE)B0md43bAC271U0cO
%JjCO6U]:KL<rd5K#UXF+fu,V.$s"BU@F-:)WPCB2m%e>TJc^dg'Olt<7G;a%^rY0JLe1R8M\j8s,6P<aZB=0AKN'(P3"B=3GTY\2
%UkSQc&U60@<cnljc(rI_rXiC#-ZbjBl_'A\=JbN"_JKX7N1,@Y(iBW?_I-'m1p/D?1D@q?Cm252AkQY>mB4@sN^bX6'Q-EI,7#_T
%Em(/Nd7j\.YRQ&X[VfS5QXYJA=n*9^>uAZ[_uQJR4LiX_)C\2`GJFJB]RiT0#&Ug7ZKS[4N=(E!)F1_-0GfK%ib$ST!1gq_`#XXV
%GR\Z7U2;mdJkhN^9\d+U^X1nj:1C^c4>*k^>mE%V<&+_m$AGWr2j:[YTO7bM$!u3iNUW4mKo")HOp6"EN?C#_-!*)4&I#Y#(JVcI
%"fk"7]L`a)JUWGaM'3FB-MdcEMjls<b&_fq.2na&2[i:."r8;f;.RMY2!LZ(P@2I/9qF2?=?Zh36$0GhPV-F9OHgee:V^")0aJ;1
%RC`7pY&ZlWJ4'PQ!L808"A4eYFb&#Q,?d+s-8Yh!5Z$*4&/5@=(3;Er8!tK*/r7`6YQLU.:;sGhMa@&p<<3XWpOIW[pAZF(Jf02/
%=7ksM-DK55q_i7F"[F=h?*:EpRZ^T/hRY.]_>nk"E?W:u:m`jB)\\Rm&T;`)d^<p7$kP]r=9mLb.NK5+(kBDD$qIr=Q6!2[$tKpb
%)e045d)Kf)QH@)GW2M^i)52(Y/Vn6M[^<TT__k:kkV_l+;/Aam&FR"td6<`F`8.lLg=Kh:%CDJH*(^6i_iUY39sT##/asT`5Ke]6
%3sBH/,7FkdC^nkA*!RNY:66T6UWQ$9-U@q\iJ,>4)H0+ZJE%u>)^5`i$-8O67LMl^$`!f;E9aB6;mJ$"EDj(q/:_4kZI(M=[!hFY
%=3;9H3hU@ad2B#Gc5a3ki%aL8U<u:SQ&QnrJKqE3#Qo!ibp^JkRAPK8Lkp&.e$UbM4\O#B^fsa"S.#bUMCEY3,?1hB/-QEY`jfgi
%N^cDCm!o:ZR?7%N0E]5)J41]h*Ms`L(fWCsVQC&GJ9iM^@.'\2jhQBe)mo_qC;k'#JBmYIA$As<i)!&RDBO$2e!1+^l>S2=.'0Le
%8L9,"/9%t4#Amle9!SF?Jm"r)_3dWpTb.tO;hIoiEFbh[>'a_0>HK7i@=TRW4kmnZQq_;@K!6%9f^LtkYgA1A)O6:%`?^cp^d;6`
%PKM!8\L_9MK6QfW<4XK.V0HC2-Gd-4:jPZ(!.OtjMIhO1gM#YV,M4TR&ZJ0#If73V&KH$1l%qf@fYXaE5V`B:O^jL#_>9BC)+@bp
%-*Rhl7Thnh(DE8XgCR/U=9=J4;aBk]4/NR$.)Kf)V=?^78M&ESR_[T/GUgY=K[g7kKu"VcEJ@Npb;Y!,E<3>s'-7`[('ndkW7&Y]
%U8j1r+,bn78d&j%!kheHL3J4D$m@ApS'CKZBOD`:=&1WJ$@Ftk9_!RK!#u08+Y?8N5+:[`@O9YdDaJ:9C)bD(nJZ?H>Q>3:,rRR6
%'_=/3/V,7R2$>un0&BZ7*Om)a/Ju.1)8qqg]4,m_^XZ:F[tN0Ar$KAk1bqm3MR?,d$Xt=adn)DPjsUfBUuFoGl3QomS!#c\iIY8n
%=sb6BAUp!p.4GE%LT5N/UVN&(Q6i@A9\:'^i&Yi%K4()s<t!U4U.hr+G\&mM:6\YL15/7$/IOroA04+XR&EK9)9PW.@9Hkb_gu#s
%=1f$1"Pt_A35_5pEEE=6$R2rBLhQ'E5mL3D!.qm%hED-iU4AIqd1mg^$c.P%6o-mkh!ppP+E,)Q-lNfeR:r?$-FUE00bB:Wm:6of
%#u1U*_@a7p$iZl"C+$5B-n63I6cY>iTM5rO!oaS&-$?#_c]Kco^6?R$:]Lb:6gFeVKG!U#;J&Sq"9TIYK33$s*=42h<I?5t=J?\8
%2%GceYR!?E"JGpZJ/lHQ!/lRE_btRZlYNRI!0X$r_-u2F@0e>FE&9,FJ"Vo*Rj<Y^Z&,]WKMJ5<QMbuk^$Cla+Ul@EfqPH\.pDB&
%"tb)I#=REh61;D+7b"ln847sD&>:O=XPu!Z;#Pol]KD_r]M;e;)YORCOTl^F[Jp9Fj$0kl7R^*hP\2C0^b]tH,,kue4A,8CJ<)t*
%UL=VK:[kM=]ca\_'uhX7SuK+1kVQ5-pdEgUK=I^r2n<Id75duPIoPQ4YE;hp[ZMl6@=q1<mI1b`due]0WO*iM4Ve\`1YO%3$<.$$
%]AR3Kl=BsqE6_;F;dubG-kNsl21q[$=&(!HD6`RQkQrPmH=?%D[mXj:*,nCbRh!$OY$rmM3NU'2K9d>3Bi>fW2"6\X7ICD-R>ES)
%(*L/_2lQoa\nE;]!:pDE>R6:%bZT8_6rLaMju^uM!pN-A%R;Kh.4c?gM`.&`)c.4X_YjMb19_Apb2H@'2Wg^hEWi-;3rr%_'9jY%
%96.8alXX6Y&gl9PQId9@RQuH#/BZN>!$2_\?oQfBS1mb>ppe*f6607<)V&q0ONkQhK.5g#N[:3+Ti,0\Ub\SDjsV-l,-2,V/Ok8G
%*:R5Z&AS9$p]2uOQnH7N!U#*HZHWSG([`>:-:<#,g_H9E.]NN-SeDulJYbb_!V!tLCgl+O`IOJ/CC[9XJT^0IV0%t7'c9Z`FeKfu
%a4T=c7Jh56^@ZQb<e@GQ,RWV4Xi"1i$Q!M[,*"]P3FS/ILM\Kq1PZ@O?mFV<L'@I-fQs<D0rgSc<FI+O6FKI&eP&fS66ep9,MItG
%.TP7sE2E_l'gp9k%%2,.B(61,a@q.60Gc`aHqG7^IDNB8c]DEm-pe`b0S*ED`.N1p6NntD(FVuo1kWY!?rH5`ctFaK;)0`27,.ru
%I3pM5$pij[_jh,&!\J7d6!94eN:^;(Ci^6,hKZpTqX5-M/(0/\LS6Df>/UE1'i_Aq90kXN;TsY&#;R#P)`imV81tMkQ8EE2^_(Fn
%]7ZG29)?GU+L;fb_X&:7CG*n/U>9sG!!Uq3<I>JiF@SdJ!:(,Y0*>ZPm3<g.6BFbe/>Q8pYYg>b<KCAfi`6:U:%SO`U_1aCKFG)k
%,mbO@!)\kfLD!gJ+&EB+YFd?`-0H-;688mV=>3H>#WCU)n6d5m*8?arK#2X]@f(O`)a^$6ZmU^We#:lc0K=`mj+>QmPiopSjBuo;
%NhmrKTluebXHAAhhELl=7P%'J5X:l:A5&XdPUc/9.!?P$'4[P;>2V$91>:f&2G1M=@.'KO32]Y_32cp99H\oqV+<jR+\W'YQkj2C
%5=9onkQck?N/^@[*#i/k!s+Q#@,f>6&5!%`0jDaU64DB^bU#nr(^^=?Kq`"0D)nmH[NR6%@2r?l#"#b0e.$O7UQTSpN(.LOV3^Hu
%d"bnhf7_N0BNhrOZNTf4$,s@^J=1'ZahAH`%9)O_R#\<F_PE"AIC=e6JJ@BI^%mKc+@g0LTLZf*g?U(@n;,P6"]p<gB43Jq63)2C
%o&[Z;[)!^tm20AE@K9XIWMWN=gQJ"Bgqk0@[G\FX\-+:%@0LY0Z?(RcPfGPBLqF'a]IS8P0U5Fh1mRL/aV?'2#1dn_"t"4;@cM-5
%Mqe?fQ?31fL+,#DOQ226<?kUZe;rE&VA)m@_&1$/_k;X!BO!6XW-&.raV8M-I^Csd_N>4BYWsM#9hHF;U`$Ttj+.]M0HU_Y'X8@K
%?kc=Q0k.bSEC#ii+e$2(0XYNnU0+gki7IgYk.!0c%INX3VW([claI25J@ks\Pc@3)Smt@80gbR1\W1!i0sBb4"h0@@&k>TETN:_J
%E',lJ<Z$$#oeKUj(Yg1..UF]CIS"k@Pee3iDVA&/WfH_l!:eM9j1)@280Qk\#,N9IM88.A<L5t3(f5d\O(I"gi*k&ea`/JX$+2Kg
%U+IQ>Wq6+YOP3uZ68C"m"4gPB#=(s^fEVPs]gNdKn=2#[%/`hP9CiV,MO:tSWtmbCE_?M%&0+O.=SJTX7Q9GchYYJj/1r54]H@-d
%HP:D'*ZL2KGf\i)XMdsuLb&d'[=s2orl!qKmt--(1o1L+N"hKaR%s`)=>thQc*.f2<of8DNB5>#EX`rSCl,i,)BIBATd1]'Jc!/*
%md];,9cI$:<,rRg),MJa>hk<X9\Bh",iW[n/:8J9YMI2m1hMHr`AT#3PF./+&9L!5:lg3;^n_bKM+ie;TPT]kSG3+IE#%GG2K$\%
%2r\G-/*&`.Eo9M#(%_XP;E)HO9*uS)VLn"i/X0L57Rf^mJQWu8HU^HYaIqK@Ls,l2ZAqUV5rAhla^rG'>Nc[PNhVZG+q>j7C'8Yp
%,pN2=\NVoO.66>3>I$$tL<ODK#`m?uO[`;;QJ?ot[6#M%?+nKBL`-YM5fYR8YUui,<gJ=4%@1&ENek+_Jk98Gd0qPj&A`n/#Dtn3
%W!2Jl"@H!Yl7=epCe[GC^YD5AN)7%j6Yc[=Q$R,"@Wn2r\]J:!8qV(;?(k05F+Ce]3eT"t8B/(lWD-$[&.N%Nf&1G1L<rkmXqRKP
%h:>4dTtUO:KglMb85Gq7L2:sXA.1=^6_^,R;&Y&D/I[4)d1C22O^<&o($A$mbGUV'0+EKoNFC0&Y[C5#c#6,7i*\[$lR\KdN!!kJ
%2D)C6`aL]kg+4`6A4?ZXauJ50/)u6,+W2())j52M%b0j/ELLE..ND]/$I3R;X5_hp.KiZ\*)l:Z;'^1ZFGG^"gbLXD!IpiLa8fFB
%4Cc0/jP1*<E1>4G7W9q)p\4i$'Yf6R+9TM6d&*ejYsRi^VNbi;+)Q5#1eH&%A<Jgd^7hth&hLFB0,e]8UF5D1,4d09_G"6(l[n(H
%[J,;FAsTkXe]s<7B)-I45EFin\/dufmOXO&OP,A-a_[6BA775,+;kW.&OJaS0Su59[W<WE&hp7hOk'bSXsS6&"(cn?3gCiAY#__[
%A5u,tSkA[69mL"f.r6(d>SY@5+S1F^Xpe@&WH;"*J/F@SAkNMZL$0u8(=8Wo+O^E-!Y.DZJi:E]Y]egCEgbV<%cS':1qFGF4^FcY
%JqZQh">$FH%Z19q&d.=UJniI9V8#W,ERCNmM43X`b?VSS,MlZVAZ$S87PiC9Qh`V.NluQC&*BKm'$I<-?$D\jX?gGZ[bP&,0m/,1
%^.,uI=WD2.b>fCbN$E%*m./eHm%auO82^Eg``dm%9_icM7:K]l;%/gO,0CTc23lpad7"?[6S#*)-n3m><ud2Jil[B<6>=Q[-/9*M
%?/.sq4@]^=1-9Bm3Z.K=ogi'S2Ao2p)O76LODIC\&iJ/Ui[ZlOW>A-*b/LAaE8+C!_jk,&bSk4!CC]`d!D"9rr*GWgqYVH'\eoP+
%\-h^C&K:nN+k2fHCs$R&qmgB#Kt^Y'K4n.u;03l@MQ3dn5o,h.`ah1!gJY1rLlFKOdb;N#'A)mj*$)rC4#?fIo`!6.1'B!MRt:R"
%m3mj50nq`YK-*\O>\Gm$3LQ2WXqDL&#4Dt0X*0VKY,t64R$r[K%-\LY%3F&9CX#"UpmVEp?@bTX,[6/m4Ip>J2QBFp`[sZ_>q$19
%0s5/(&i3'dUdP8X0R:`:J.3@pAg-B3<5ES^_+rFqGb@5`^_kPf@`q]sNJUE!KG/bcBMe*[C.S(!Hj]"N5J1q,)dX$h,F5]\OcgU7
%J%gY\/ErLWE/O?30i^je6,J$mgqT*@'R'Y8C)7fmKd#L6p4?\F7s[pt4Gd4%2:ZS@RB%n4pXFI0,4'38^Oh#\_t';95q:Ot,$_8"
%JDkEo9ea.2o3=s#C7%q+;sj.GO(`0Ni_*#]2qqmj3P<Tj2";,V&XF[aE5'\*.1@*op=A<>BluP/@8!6B`,,[Tig1.4,pibul&*.h
%anD)R,U5#jl?@BD"d?U7=d"kuh[XOaC@<8DO2u5E"1\nCR)e]mP('q(-hW=QqeLA:ki4^%+QH<ZgoK%H9%t'5.+iF,3d"iGpbse?
%1#^:J9i]s;oB@s!CfnCXX7p%j5ddYi)?aDd[nj&$&G">u9@c?,D%c$>h.,4YUaj^m2!-Q9J4uc?S&/ApRM:VT&jTBmkt360I[?p'
%N,cuB-mihXl[A.!iVs=cMLu1,DA134'NAHaaA"p9#No-/+=>`6b!Z20AIOH>7sWm77#)#_p5FI\FNS\,1)b6K_o/s0roPb1m9JCq
%kc%dLljVYn2M61@.kK\N*0':$OQ!+-9JM6P/*_^H#A<3bj_9q)G'u8:XlsF=@H,s.8WG"L5as#Cl_-"Wpch*Ak^^57YQpc+E"$;Q
%MLAMl<BL!EJVC.&&TJ`spT_*Y#fF0PS`83s@E@ps9rHu=Xl1[$QGVW1#RDQ;\Z24\5(fFV-^*sQ,DkZT?Tat#,fBm%WQg,?_bW.\
%@X&bH2\gm(N;4jJ%.,/SR"1l+TNV991lru[Ba=:/>oA6V50NSnf0.%O)*13e7%.urO$i+V!Z0pjgeGb2MpakQK=2TF1eceCQ8qNA
%RX,f`kD&AVgH5Co'.W.XaCBW$X[\l,"7:gdcbgF'n[(+:#Y[<pWo3/]^YP3DA7A3IeO9lNN'HEgatY0a'T"igefb6>KsZF7-/hAW
%(^Zp.gsuU"I$9Otkh+<<\,OcneSu4TMd\SQ&WF0>Q*;qd?mt'i"pMgKd4l8$bC3+n,#n.PF`!DaUAVr+)]jo;i`$A[j,QMK2o'sY
%_3A%k9EGRf;=0T?ZSU*KWcepd(i1u^_BHT8.aBLTfk?2JDfU%%'*72a5S2"LR%%]%K0'A86b=j,]u%A`TuLIj6'!-I2*tLX?u).P
%H&M#fi)qXo6QY+3:k>V&7^7*d[p>_oX"\'%V^?-t_?M(LU8G6A_Uu2*]p7lrkXGuuG`U+E4#*GKcjHcb8r>P)'uuam[`in@,-=qt
%8?adn$hHb2N=H06S1)YGm6$rZj\rS>CmS'10`X[q72fR$;hE"#>KQ&$]dTWGaEgi<2moLNB1YN6D%h(%8IWQ-XT`S=Ko%HY:laO)
%1J1aS9=;jY)3uekY6-8uEMV*Lg"n!=kq,gbFo9G@`4(`)i<Q7h"0B,71'SSX>LN_]]W#'A/@WNrV2PXskq(Q&d7<cJ<Hl788lOY8
%q;,I0*8D>&NinZ20E@]u8GI%iLSnT^QK+a`Z7LE%g7ecjMQT1"QtoOA!.\gZi4$[FDXFghYnE[fR'[G[/o-N`f,qrSoj,A,bVW_8
%LI"!545+0I.Ak.j/6tX)O7V#Y@AB<@=Z2AMWHtJ*_K*<YP!-!id4"a":'g1AoS\k)^I75:O^UC>@W;?jNiIY=_d%%%@YUX]:^6'V
%$EdKUC/(8b5SqS-c7bJn_T[_6G28G/`=P15T;W5;s,Y;mNjUZ^s$pVg#_?CJKPcDidpZo\M;;4*dSQm;#GBcV"Q5jo#[AC0Ej8M:
%<LN3DR_]3@^MDOfrh#F9inV2^N%'cl^kB6B-cQ$&.qSo7rQs%`5`^q^V9'",e6%NcR&loi$B\g-`R[^S`t@Yp@'td+3tOU[285at
%'#:t$eF_Mq31EXAM#>T!^J?[qqG+7>Aogu%%1b+ZL>I%1GV6Y/S-*1O8Wa>#eNABHGq(Ze\mXA^Fia?a@6+mMW&>7j=9m.B1Loq<
%S&Q:BH\bdj&KVjJZ'hg:#6@dCM#aX)WCY,Hc>>g=gsmA#^2Gc?r7M^D_c^`iJe*KX+F^]MUnYGu$FRK3Z+E6GC/ZT's0G;H.io]=
%:Tiu!)bpjkhqW:`hSc+R%_ap^kcU\l)m3Q#%St8%Ij\/"-jGVo"6L0s8Q9;QKcsUNhao$#9`6nIHSB=)TS/SBJLOKtPgS]&`=876
%D_d_1<uj'q+&s31F?To2G&7q5%)^g"4:EC1R1bRuaCbK5'GQa-6\b?_Mq4/!#4p+OlqE/4VFNVG!;+Me@@rLs]d^@oLc+:Mg6]cX
%,OXbL#8gjbc8%9TfUM,EVn\cM3RO7Sgr7-!H8EOFFi$QA]pNPM\Gbf04u^(&f8E00Qut'j#Qh)*csgDeWrX+`Z#YKDX&/Jso8[g?
%hBK7=1D.%(r!Y6Jg=j_kop1jk6cLug3l+)>c*mT$G,_=eC&1<6Bmt:')=/]gUObGUY'.IfXm*aCh(Pe`%[#QqiPbSRQJN>k3VImg
%GYDIGC?Bd7Ja9[B)\'eRc[52`StQf]#0^_K\>au/IFuD'=?9D##:g;<g*<jXQ/"dhBc%/ED<[_$-q%q:F>LpZh?4Y6@<EKoj*MT0
%i+'A[$^!/.mAka7).=pUMr\OQ-GD?LA"a/mS([@r/hFXq677pobO0.8FQ(mpD-*YcFX!=0cq0_#[i1tJ[aWj2Ai!0:e3E1]>`g:E
%`YFTPE<gt-:8X/A*%K-8.CNm'gBYlUqh6GL+G1Y!a07EWRAS9Z6,[b51D<meRQC;cT+P[E873&2VQ:H.F.0WjGDA2$bgH_kYtc]E
%aeDn$dQ]r0C<,@9/>+ECP`E/M^>`h7$,%/@rqfi)rUZF(Id3PJ+1AtE@6?/?*"i(Q7NuCnq$Ch#3bkBA*p_3d'HC<XN6X9Q\]/T!
%'h\Y8=_M3s3pQLRJ`S\Uj"'Acd:\'!LkYZlb2gU,KNtN(0_+Z;$[p%2Yge+W!OnFWIR^T;2i]-M*((=<^P-cDlND*?kTa'cpL7s)
%nc!\hT,VF?lNUDp9thEX=<QJOVhj@U#>H/l*JL"4A1Ffbn]6aa$nVn@f/.$8WBEV+E@(u06#P.kAnL>?CeUq5m-$iElF?\d?2s[U
%_H/]&f."EXBtpN9!UO0a=DD#S+-O\a!OQWR=?bu&g53JA6R0eu<82B9nG+I(?3BN<RJlMf51?:&#0j^i>?90]\uJ=1XIpl@%I,*=
%R7`4NgZYTEend$KIF/+Pd+4c?^lf7edKfcf/=ea2LuZuL&'8(IM`Y>AgZ57OALT0PkK6-%i!:67V$PRYM%X%C<Q>`W=R7m"ki/]V
%i]=Em#ZuV<34^l(-t/m7hmnGpq+t$f=Wp#ZLcJO)<lU&VJ/5M/o'#C+NPWP",A8Jt8i!EuM<Zp"AgTXF:u_O<N6E!LEiqEA.JVJ!
%e6R_V3MP.MF%"to$P,ki0:#9Cmf0!s$Vs#\E4DjDWU'u9ZBd+-?ARWF,3_2=khsE/\/?8-_50`I<RY_pWCq/KZdFjn\mZU%=XYq:
%`!m2V#9u>27]9;"jks^D`aDuD!Ak32V4RA77-/Poj!:!nco;"52nN$j]fh>,i"ir)$kS`F=3_IfU>EP^&7D/=MDScS0I@F56R-!\
%9?Y*5%^.1CV$:3f#EOSG&60L4`<q5egaaOCrs5RuUhq,u?)TKF=D.gHKjGYq3ehch2&#52"cWWRE5PB!J$)>uj<n="@SB*+"aI5*
%N4V/r0GeXkM)Ji)=A^h!1]hPMfuu*<_G#4WJg9j@?$4DcgXh5rqaoZFBU;k6cca1brj4uoBGfe9_:pqMf9/RBJpE%gqlt+hndB!1
%cmUTV.J0kkY5Ud],cFZ0i]$cJXH"`*@,S]ic&u0j`)/pZ"l5Oo2A9i4jQVuOo+'@#[A^i"PcF%$\9+QHM(u?G;-XiMpPiRK3nkkN
%\o=E/Z-Wah#/)qkAKhhH<FWkp$8qP:i"%LFeuG%TC/!kg9>$0]"&u[4G`t[:,KE/,4Ti2hW2-8,)k*QsV:8dmhtn@l\kk.;!hNka
%Po;u-M`.S\77RnSkRmaEU$"d6,!)uJ@h0>m)Y;Ac_c-JbqXGCL3bcMZdKm1HbXh:(o9Y6ce2Li5YLQT62,rBT6PlYri^*Vqg*g\X
%8YN4Ud)]X]DRLOb.aQd'*>9B/Wf&6Y)MJmIVucg>4Jisq9,;8T<7eM+DaS<#><ObuZ*KQh3Be.%23"RNaG2_0kT_H9!9XiM^5QOW
%"G93W'lC>Vb%TaW"`g<O?/[1/3ZjOff'R&u.WRe\O0999Ko4S^]I$EX9b-0G354r>>\PECU.DaCnRZ]1$TF*>QY<-Cmk4-)6J[Z7
%*5ikLcq#^5j,ME!Z6h1>[?9!unNp/*CadZTLaY-`CdRXMPe2U8.hG4rR3c-?Pd=nF7%L82:^][[_@m;7b<#P-0r43Z@[ME;\#:HE
%YUZU"oc,K!=K4(A!1]$jfD\G=)S@ZKN6JudgJ1S'F00N]q/CV!["TBr-;utC`N.t9j9b7X\@U6F1\DVh9F9WL)kg-ei6#HY+n9j5
%i8R5YE+9`giHEFu'h(2=;C:k;&m'3r;$7Go0+:iP&.@ErU=9I)\B.F)@+mFC5FR=11(.nlE<g=t'c*D.@u5b]]1r8cn#mAKd*kj\
%a:Z:kf$fRHm2`>R"lXVK$TAGPR1Z;jEDr/Yj9V22qd!'R8SL!9I^QRN`c0*$g@-RT\bJIc\;XO!2_kA@:E5CU]Zh$^6DO,Z2_#q\
%`Q4]X_;#E&d!V$nU:'0lrSeB'6jXacnSa=E>XuD0i:E^G#rc<E6-slo\L=o92(XlTY[la@ABBG3d.2nr?s&f=UsZZ*)uY&97aOEm
%&-uSdMH(W?dg?uu@,^8H@[1kT/nPlf0p^m><*1a-Nk'X#mMp,bj!(ouS@j/Ce/K,PM.7U!X2@Uh<aCrW&1*t@,&s;%\0J2L%_%:J
%,(oVQO%PHP/GcY+f)/*n)\iLD?:%R%pH]S%hZC"60Pa0`i^$6hKn[#%E%ZA<Ds\8'^=<0YECYNh#:k#!1-c*RkD"/=7*YI>,=c7a
%MBZ#9Lc\4?KTM6#AYSs@BU(oD_3.8X+G%])?PdVP-Pdah6.&=>R'j^uajKUrr5Jb^\38s%b:?ZtOJno-Gh\nJ&e)7uUoUi7,42mU
%C+,jLRe!UR]Wd!FTF9K3b4EG)k$4Ys%;o6R@Y/eb=A54(lIL_e,JcGuqZdZKH(*-i;,P3cM9[X,W.;sf&c?eUF<>Hfq^o%qIg]B^
%kTFn97/P9FBY)p!A%S`l]&/=LJOe+EZAf(SiM.H]bVdpspl"2lL0$2oK"+ZS>u%A+(2i_V'coVkcpn^NC.AC:_t+3Rqf)&f=9\:f
%%)o.(=r)Mp.FaBErodY%BY/&<O;t-)fS0k>M9Dp;\Jq%%fU_'fqYGHCMQK3c=?Y;*D/+l)d_1Vm(9[*JJKUr>kh@eZNiVZ'5HSUo
%J0CZlnCn]%IBWnBe&!PBFBEc%<%\mQ#0ImIclWtr1ksbhbcPjV_iNiLV"XGuW5mt5+aCk^'JtPF1bo+LaL8p2?5IAKk7o%(K$["#
%iYIAWOpE!'E,a!j1*G64@bDBbXlg>Br$\V>lG/3$23m]g[m%=e10I:c@lb'Q@TKq[M04DDlp9[h[)6_?Z!Tk*T7Zs)!Wj<(6`s&m
%1?-VZRF8.ALn1^BMH;aIN_WW]Ffj*nUYkkE3@:*FlHQK.P?77Z*-L*ZhMd!m2'_a2<UqcPb$65p&om6-CpmjWV_DZVRt]dHR0F(X
%Ppq:t(K;oM.;jQtoeR#%pSttJd`WGr^lGQGDIX)B-!M"-[p`^dn2CmV[I]`$Z0TCDXZEC7C5Q&/<Bq/^>2+N)FKErnXuXOD$n<J7
%qbp_\D_o&l/0LA;nS]0NdFa9G2[I=tnDZJo$quAh(u1E9?eX3]n,9!/;"-)$U@/Gn0S)gI#6t=8Q'Xs"[=%7Yp!+%ZSeqef*.o<N
%=!92+I_2S&,3>\_1,<^ZVLeR;@-Bl/JE]T]#"MCk*m_lo![0U\C>m]kd`#\d>&ZK7^kt05NAV+bgY^Pu&40BN)dGnicAmpPX,ina
%(gg$aoU.mtQPp/Xd:OMU'#GNPV8t4*'%Cc$>ipn8IZ]-iQr%W6!#T<)r;a*^pYf/<VoVQ3pEa(GhDl#&3.Tfb=YedDT\=<P?;nZJ
%XH$h,Mp&rk[H1(:Pt"niGZhL!%s_WQ"ZJ#MC07?-<."Z?Z'OaVUc/:[[?2so"MOp.*O^!.i4)DU`.4hI-F.&bKlma$Nl!cY3`h4o
%%7f;5K%@K3QB(!r\;#J<$.i`q6m6+&41I6Rb9m=G4$'O`Yop7Zp,YU^7Vl\:`a3,rN'dLD$k,YsoUJ)SOmP#9\@l<qXAA%P-/],R
%&,&M)3Ie;CqA(ka"[I9TBP:``Ht+$51bf>J#:_un\6Q[6Rea)(FnOQJ>ZYDW0U7c8GEp6Rjd:1eCSEAmKZMOq:]H;XdI'hZdui;\
%rVt\Z8WRGn;VjX;s23[bZ:gdE-);Rp;G+0$;_-@DPT$?tI]+2(naGuaK,m/=A5ZQQ1J+iEI<eW@%Su%#5@9H0o+PX/qul[S&)r(!
%YJ3A?)%i$qFgjdkP<qH]0khZ/OAp,-*odXkor06\d?uq$i&fWV:\p^3jIREga1Y/EDprgD5,m0-G[n1HAmH*]h:b.sTLg/B.H(6:
%:UNiq;%"[<nmXs+><cRaFE[?:qsg,:lD:O9$dNWm$8Mg_?s80aK'K&_DGBVP$dU:0IZds3?bM!Fh0agJ'^/<P!t'_R08d6)/^F@*
%FV[l,l%#d?HIU#Bji!\?BaI>6dOg;GR0f59beR8kpl@=V4J_4m`gFQ+\ct%Q,.V/s-A$np;C:BSlF(fM&CBXA57p0A@X!UY*2PMS
%o]q)n%sOR:h-O_o&(6%k.@ubf7!86s+AJa7&/k&[%VCCLM#q]1a<*_XAT"?eM1(L:50?XC;A[/Y4njl\"6s:76X'bb]s8>s"?Lt;
%Yr(#u&f#/Ph_4?3Jbs>[;_]R7iSpNPlr&p+4M](Ac?NiIUqsPDr;M,[el2$\Us^`]*@>uNqgajN?%>)J$ORW:;Z,C?_.KmppG)gL
%IPp9X67*46dk(ZnH15\^Y;f;BW%iID]&""dX2SeWU!;@+*J`B>iCn7E_N2S'_0g08-m$R5WtbtEE?(-`F9Q`(1)8h;b5sSdAC[Yu
%OVO<U'neF4SBF':mXbo?dD[nqM!DUmk/_6$%im`QkcKjuBE<ORa$2lt2"f]b-o=2o'll+9?pc7:FPA5e0MoG.OKNue(!Z?iTf6"4
%JFI%U(DIDpf^kds"0RY%$8RKQ1skA7oI0+8GAMhC5.p;4L/a_;aghtnL9$WC8C_DaYON0hns9RIjGpiLaEW4O.BM3rW/cJ=7Lrm^
%+>(n&BgBW7b/,qKW$$rHoUa;J5jm8o5t8[)9QT_+Ao?q#6>%@Pdo-Z2d(NJm$;`$rO]a5QDWa(,+#MNb)2Atj78%7PPo"1+S<SfE
%+b;)p)ARckXF?FF>^:G&jiR"ZRSIFKcAG`lX-AiQ?lSYT-V(NXJ3.-3k,?jE$?>Ca"Y\`r\8kQ&4jM6XBbD>CW>7Y94Y#tA_=:\[
%2k^eiU)A"8lCNiY2iJ^3l(7Ecene`[CbCGBbtACdC[;%A[l+:C#+`T`)X/,XHab>Fk.tgT<=jPHk)8Q(ff7/@23(lM<=5[C?pjH/
%'Yppe@(VaM*dQM\VW0BU-[V^JQOnr)%Ns>@4VK4L6Hb/8%(Q/A#fmjMJ8)*D]/e:T1#6$kR1&KWYSt@bHbY+4)=EGj'G&GmSA6bf
%0X/NYJ+t8e35_V\/H.&BQXX;oAE&Rn8I+)pj_ue#T:='NQqNj)f[qZ9^uWJn)08Y#T-.-[9emG]El`b3&InD,+K-s%D/F+FSF`F]
%B+DW.)&BX*0s4CH4/4O<Y,?"Y4im_@d&CmcE.3R)pJTQ-!Y!YnPk5*a?s<\aTeLqXF$I%?J_DbE5mF#=31Ggsig"G/a"2Jn_CNA>
%\[YS)Z^B02Z#:%KqXp7aQ@2R](tb:f;h0`aktASFZ<&Kp:RCtj><79T&SU9"!<H0$!AVh:E-9B$OAR\8di<C_KlGd.B#,]6hWZbL
%=f=(@?(JYS>%9ZqMpo1j`2VDrF,=2p?4ET"(4Hs`V[tc?'CT(2D2hm-']\/MFF[U*7(@5e3l$Eq&Y07^jhXeP4HTk*VP<a&!^d:a
%9E>=lo!,_f%S,su*BS?+bnOOF+dQaUPqd'KKu'Fh4=)7I-W)Au*6YqLFpd9$O8<TYnefuU_RT3gU#Pe9!0.7gl=UH;_rjC.)lOc5
%'P%p3LY3X^TEr$?@gbEjiO)H:]WL7&J@[!ZD/aJ\:[6)b%2M?4N%-m/8HH<o;Ye.e80j^i3FiFBl_P`O!g0?*[hAdg(WJgP#+XMT
%"Cqq@[[aHgL^r[XpM5=m0"fq[D#>O&CXoCo"-fd)l&Fg3Zo%5A]Z+E[.,;004"bRrRCtuQ<A8Cn3D*me<>MN.T.\It2l@iR=8N*G
%,=f[S&E`&DcP.??2i$PJ%M93l40deic7=rbNI"R$ir#=#igRRoCP^si4$e[`rjEJj*aRZ?>3qdL;K^RoI=bS*l@$<B+9A2(XVkqt
%b7KaikR>bf4@8'sY<Vnq_'9b&>?d-nQ>HSYLukW7V2EJJW]L\qh8/6dPf9-q3clgo,<1TiEo8g;@F67k7;<(3_X$;WTV8`,34-,F
%g93qqLS4LcfbQUA8sRELWs,)>n6V/*e;5bc%Nh9MZ[Su*\ccY?WoVaL%S(\tO%]B</cI.,+.Ia)Y4ssto\#PoJH-nRFkA,n'K_(O
%e?@Jj@rIg%"'T,1PB6r39CIbanGkn^e`rR<GdnH;ClOAcq9Z<$LL0'Jqn@qK'K2agDMkJ%nC[G\"#q[j$\OQda7_ZZr+kR98!Te@
%SF8nU>h5*RJT1PZnOruO?F:kYgHb"h+Ws/!R@^NXeWt[=qdmSG%pnq)]6rmfKS"6H@#+N20\)F3882%DH&]9R$tE_BEn`$.1eOe4
%J16oTnedM=WNj%^o8#?,G@%G<!4;Pr9T?Bd%FfiD'P%cTn^Q-ON^<?'ZWe2-EoEQ1J#(AnGqu$Dol:XA9jh#HAiXoN4-"eqWr-Q#
%7q$Wn_3.i$Gr%X#'LLsG3nL?>ZPT3\ChJS=nljTiE&n!W"f[?g4Afef"9um^@nVAF`mnlEA#"dZ>Gj)UoBqW%N3RIhcfQ?QG%g5g
%5/<?F`&M5AlDr./U!T99p+3DV&c&pof&X<K"H0&p/ueoU;=H,Gf]EYdGO.SG7\P6tbp!!1MD\gc9Yi5C]_0s5jCRgt=&C'Rd[]=E
%UDC3Xp+b"%^k*uY71NLe6@nDkN\2$8&Ml73X@TW&Eb28BG_&E.>2,GH.TV3iCC=A&1>g7lpj:I,V/!e>fPW;1b_:7ep7\P`[_U.e
%)*%dKHg-_?850e;`jb2"Zf/#C6U]=nSB;:pT-AMGQD3(;(PUg&G("LfWegemE'LH]"fc3EG`'Tb^nCL#%MSso[iAS(;6Ro*[uP9L
%GK1[-mX(A`XeKFZd-=;`#EFo%6-?K\UsQ_;,R7Xr<38%.;'tEqWM[.UlH?V7aO;*P1q/%iZ&JgE6K`YQL\q]L2V7;_"cn%Uo4&8Q
%P#R2uShWe=NKCec4^X'o6.^]/MbDQmPJRm'P#4L\0jd;6@UHfgUWA6-#5:]=qOHok*9aodZJb#u+s8+,-*"BgckX\+@6.u81Cr@.
%+U9M`:Qkf^@fcrIhVt,*36cY=e`SNR#eY^1L#M(MfLRMfHU\,>I[gP`rhR\p#`i"1>h$99jDLZnR0_gDJab42a$GP3jJk=o0"?##
%0Q',2;l_paR,kqj(CYV>#9\'LcQh/EiM!"Dc?+5<%jqaZL-lb]6Ioos<..n9V-f*0\oX,7<qYC>=J&o=qtF&:X;mZai9HQ#^]Vqt
%SrJ_BE6bcJB!3bqNW8BA4hUa!5$Lp`9;NZjjl57b>&P?<*[@C`SmN_6I&\naN+Dd`*D_b>Q3)Pd&q[[2q0PM=\$S#(T[b:Y^%>Y(
%YgV$'JXOr0fe-Fs3;RiGh@1[3lATi;k.aSP7uPj+;P,lKfdf9>'19/%U[UA<PUmEc`B+/T9lduL(4/k3F,o]T\;M(M_CE.Z+[l#7
%)=ndSL%QU5[C?2U&B.aR&Dma9W3I<]K=N9J]638^)]Bu*R%!0sZl/qaUcTVE928Dp5Qj/:Yt.Oq*?iCJg>dV=<Qo,BpQ8u"gqi5!
%[o%t)95ZV"^st/,5t7O^Aol$2hSajt41;p\+(!\IO\ld\=$hMnku)Pg.d'.\bPVWhcKo-l:tC0Y2'0`j3q1^ppmi3=TE1PEQon1^
%lkT]%Bl4$\@toSo6<1+n\b%$j-Z8@Y@gbEjiOtgm%MhH]^'tR*OO]:HE%e4D_-%d0?FHZp)OpT`Z86$LX8QHH!lYe?G]Pq=3RNiG
%E(dN%<$Y!!c=!S3mGu6c;irk/Plo@3M6hLBNt_\.e8]8:$HQ3&O0-7d1:s4X3cjN0Jd=i,j&?u,QKt'2,27P8gF'G+D.'M8C^?4+
%cLIas(PR*edur>e@[mM9!nC#jIbrSnbVWibm?.3J]!&G!S+;dpAa>M1Nh_*;oBRClGn7<,`U9qp_%r/O7B7#tk194PTL^s`AXeE8
%^f!^5SVgpH/*"d6P*d-]2oRAE!l+H9K+X\KrV/OM%k:*.XL8PIHF:K=&J+ul(1)('=1Ip<JJUFnFrLB6lA_I8C2?1a%8tZJ&ZXVL
%c'k?a9X/!$</sca)[_F"p[gIE;3K][.)qraE+s9(7g:+aLY)5[FKS1fUY1q6=0E#9*<OQO["SM9%dg=adK2']E8PAUBrqtKiKTJT
%?\ae@n=6.D7o9.U7+RG/N(As06\HVE:fX^%c/URon<"kUU"U"/'Ka?\/.bf1&t?j!$>cAq>AFFIh(f+T$p#ik)Z3&:[D2BMJJVS$
%oCf`!Y84.QVP7SFndIqtMt:\h9X&I&+<D(NPXStN5eT`/\jP;<1e"imhrEK0LK3q9E,:LWd%)U2e5&kgCX$=p>D@ZgJ\/-i,D/I>
%A^9p`JJVS$pW<([aU$:t&>tjYl'HL8S-UT($K8[6Z#Mpm,3.,?+eG!%k2`?'<.KjN'GA$(b=<-<>Yc^S@p)Gs$.GCJB>4iY*J;Xt
%2MYR+H6(bF"^Z0,of!(QG'.uL,7T>FZ85B`VCB9A:\b2=6bfD8DC>X$$me@cUX!bIrWFJJ\I>[1$S^[V=Z-s,4?M8j3<QFE)%&,+
%V(eD1A?FP^A[!Bqm`kTH.lW'OPrb2>)->Q/_8hg%Q1bn@0eaD9hm%i<(sRN5S1/Kq"=eCqprBqka#j\3DHK<ce&iC-2LGe:<=1Q(
%n4jiXCho0=#)Bm-&@%qLd=n@5^uL>>&^>8HVQ;e,hqWUlBk&hU:<*e1ecsP>*gD991?QUZ^A,$<1Q4HBg3qT%$]BuQd2=Am[6lfD
%BK]*h0<$nO%0un$!0d0r@##lWpB\4mbEP.:5"<r\!qh^1Ks!6FV'V(SYm+,fnJ_'`*8;5QhSr!9a!s4?og'R[jd:o[-SJ(S`6tQ&
%!,]ab:22>C8s'`\1,gDq9.14"dOcu!LpFrPR!.AoNHCGqW?8"OIlY<k-.Cdll]cZ63\8h_2D23c>93fKeFgYLR"L.SFj41UYYd5j
%"_%MILa`$tM'T_G2fN9-`DJ!EBDun9E4YSP.[]B"_R3)0q3>86gc%d!3U.?N>EZki"'9=RnjO1"_h]JR([B\AB<SkTc@n_a.DAFf
%<2q2jG,5Ygii?5jHf7Lm`TIHj4G`9K8E-&[I%Zcg'cmG_q4I<nY&uk_Bdos"rOF,7Ff@&:%#?_VbZd^?Y$9oOYSombEq]?9]ipe`
%J>UQ+1>q3.%/q=6N*+(fG`Jer.l8;RO-q^GjgKf4"%IIZ3f]M9es^<'gSCTi1_[;_1V&eQ$LWS[[q7>]QMk-EE*OAmho*Ylbc=eL
%4RqA/%q:_3Id8]c)'g*ML6G)$CWma1+bbGc/SEI$GGqB1Z\7ZeP@q"@NCu^S<*eW=dZYJ5V4DN;"(ihY.VAfo-3[VU=h`.0=\o=m
%E*R'3kgSH*r]]V+D!Z\pX0!'\<4A8s%,>oA4,@95Nm]d!RM!OJpL@j]fP+NVSPi+R(#0RO@g8F9ZJWh:%SHj1?d]!oSQas>#Hr?T
%*4O(PKqhbB@DM1i!>^GJL/T-8E>69U8!"j]Ho+C^eoZ(+jjqQgOhE^n_!VZp3gO=*r3:jPGWgOj.%o:8oS;R*_EQM`<uXURGRsoi
%QP#iZ[d\K=2IU)#$E)55=@(#6P[=56gb;iMV'#Ks&J_ZbA256`_Lalpjtn[:biqRt<sBUu9QM.$rA"Ld%&ZMp4_?7#7BsWa(Z'&1
%+:pKQ!Lo2*:2Uf)B4QGKojhKQ)\jOten&!"Srt,0>>+@m'ue"B0?B\^jm`["BhAa6O$\\:1*@4eaNJ_$J/UQ!KIb<`bGWt)GKbY$
%L^,(W@2\ZNE!q.KS&M[C8G#pDA9.7CMRQ('OTeUh2]VT!7k(@iC;]t$18@s9G+'akkL<Bp*CNm/BknKRh6I/o%&ZN[4sJ$9Z+r.3
%??rk^W5"HTKC*=X5H#4^:iNA;)R;?*4O%Lm&dP\MAc.t.U]?+'P2$:nO4U=sI/OlBn,6"aPRj3dJ2=]6"Yhb\&6e!NhI^smf0@6X
%.>J)en9JPE9cc6@OS$F,`:)Q2,fo-R'Md^5Z)q]M-MAU<L+DN&/r9I:-_:`V7$ke"RGJr'q(om=V#P)mpDq'D`S+:9a0ULJUI8B!
%,mOj#O`q21,>4".0Z?ZdVX]"4P*s4PZlL$N:)9\]"o8%Vrd.:s?q*dt&!;gOTo4G&&?jH&X7`@A<^Ea%2?oh_8nrLOD)io_Jr*cY
%G!Z,A9R**8,I!2]_T+/ABU5mC9VE3tC<3?,ThD/]5mRDL+u9_^IkW4kBhe_jiZX5l%V>L"hcIb5M1-(5DUiBiHh7$gogKi7a@Z'%
%'o*97*\bE5D,rB6Y'>I5B]9^60LSK($9V)=$Gmc9*iXd262g=*Wf(,)kf`SR:Xe40eL9oHgJV$=)Mq!\NV7-WFbfXGlB6G(K*Ll?
%_h3#8MUS[;A]C^E/^KeF#^f@0q)^&R<n,])U__/XorjgcQeIBNf_X]t=a4t+VqsTpBjWZRQT.U-48SU'H>4Z:/oE_3YAkh:(7dp=
%96g(pfe<o)(oJMY8c`L!&g*e!fQBLC^8p4&S4/HkH5&Mbi\lN`:I2eV.X?9!n`Sjqc/<eDBAbWtMVnp^,ZY)k\g/o!A/),FE['[:
%[F,MP8ep*p)XC\e8hEjB2Ip'aVnVq:-415=[t/cs,kd!LFS>,bHe3^N=V:FZ"KoPoW>^YX]92T^bD2AWo@57b50_V+5!M@4cD.mr
%>nN#ApUQDYCLsdsjf2N>f-Fhtob_$sZVN6]F*HJkL$rQm?hfuY`."nRl)=kY(f*5BN$>BKe[S2/UL%2-GnMH1+\,);TI`)?O=hl%
%c'L(:#M7li\l+RleTeVBn1m%l%cFi'[2>h?hBujigY;;k]^'pJ/1<l1pu,"1/jhf3D;e8D32i*sd#_V3mF_^KkN/(4W2f2?e@:H'
%@QGm(fm@A0J3<1$j)#PRiF@qKAVT(H1/h\t7rF:,DUkdB$dNWm$8R?aEZJ1d9)IZfnB?MteM])Bp%G'T[MllYa:b<4.gesmM,&Wq
%?Ab74A9."!>]54^m417%GZh+!D65X#XP((N;2KFW"ro/$P^F`A[?'#=\/M^3m$8q?A!d9/g=kbMA;$Gc;Wu>U]2$dc$q('1$?ZK4
%FA37#*-S;pSQa(1\9BWK/LJsM8I3Da@%QGS:4u"g3[b+t3.]W+)P`$R'C3tZaWT:\o<Ipo5FsIC4haH<dHm&#pX-b0VYErfqS,P?
%*dkj?m5o^kS%^?\hB=jmp?E)7D/r-A4O/IG.9<0RN=IORl.b"CV&K0H"38"5h!S^6U"hV*-!3H*c/[nf2\`]Ac-:43GmA#l%M4WX
%@D=GWLef7"q#.CY26PM=,HQ34cc`gq.WA]r#)"(cX1+Wda4#$.+IHsbF4/-haYJ6pF*;^6n=%^-ZJ+(<C<&4>15a!I[LUpI(:X*F
%i"[?jgJrhT*&2+CHX/Cmj>^u9na-]3o.scA;B3e21^QFDVVrR:`S%n1\>]Ze[6&@E1Z2B;V6r)_BF(EdT/O00g9HV=&)o8=SEABV
%-acCrLsiI1??"l2D\M]CWjBf%E_Z*7LVou^d:FBW#"BC3S.q&_[B.;b_/U(KT%T6'Ed4F&!]*>`+"/67DGo'J2GcJI.**g6hjHBX
%e9Y]g(G#If*r5;?HfRec4gm^(XaP'j?C"EI\u#[li/roG+\aHdOgZf&YekDe=I@9pVSY_q$:fu0Q90k+I$W[!7T)l0n<S0jabm#e
%bN1>a>`&.Jn8mcN\5d4@ZPF15>ko-pJekpu]Zfm3,R.=p-dr9r?r=3qj2]9*O<!4[bscIu/>pPkKH+B53pU0Jo@b>_hGaFcnX*s1
%;SogU2ujV#Z<;8Ma+G@%4K6Zj@>+)"[NE!0@<LU:N2&/WgB_2f?GHhBhEU)Ac%dorWg#UR%ZHpB"bXuXXsoAi;'Ii#<OF$)3duuc
%63t@S$U1BiZ8)pn#$9JN"aJ6O#q(J_.TKUbA\cJEPQj&W`_lM]+qE#4P-eP8b0U2kTg,!'X-,TC-"n%d`MdfQC5A-I!p2tgUBu4a
%K6Ar,%agIrCf`M(k)8ph_:hWJ9SUbR(3#NrQB5fWIU.a$/a-<98U(;tO]EhN=[Pd:/sICXEC`fK65_l$^^RUm=';YE>\M!ilk.7'
%-Va`h!"5]W!9cD_(B$"&>7hW9V8+J%5TNPg"BE_]11k9krm\'//B1-1Em]4Ph9D)Nl+r4m9H>((JdX5/6j,>PjCQOGfB7if\a&Y*
%ZGb?9I$EP"bKHNpYD<\"l7)aU(oo5eUeF-l#sWqmcA?09YH_U/3"Wf-mR!MGd7*=^V)O<]52<!o8je3&XSN(D#XIHbN1q?1e#TbH
%^EGU0f&DnR@8$cTl[@=EmZ*KQ2gACH=I\t"*HEpo$*Gp<l!]l_Bk'b-iRD2s,P"-\_N=Nqb*325'IY&Sn.2"Qij:A9996;Z\.Uc+
%Sh"@jLQ.6kS70K&;UsD-VX_$<2gV)V56.L4m+(PI_(.j+b3%3o'2)//\-_C(,kbe4XZ@b-JqHK_:>aL&efYP0E3>NO")n^*U;SX&
%IV6PDl?Qj>ZIp$d$EmH-3Kt!0%m=]Z\l^qf,L&Ol..W5!Bl5W@?HmA8#dI!M2Adq0aq<DMjIi.M-2Wt&2'p8+6Db/ki_Y4.`lJ"W
%Rpa$,%hl/;E2TGDC/i#l;mc15!:'q1a$^`J<#R&'?X8/LX&`pQGRo'8/tHTS>b"[)&?-M>_A\@op_"5D<E)p1WlhDF.G>'*cRdQ!
%UD!q=f1hk9O[s.T=OU,t?V\D"Z>uZU8YC[T\s.<43l=gA#'4Ys7Up!8S<+W#keokH/QU"@*e[2o3WTu[4JFk:WaZq[03[@Z%$o(j
%<LcWYp1!AgarNfW3)X`4-bPXc1C2Jaf13d^6b=]\9cQL[K.\+CJ<Em?G@'X3b6\m"j>^0!d?oIdhZ5`5fOt;XC_dB9"3bc-#VY@E
%[J2JXe@3Vlqs7GnkMJ!Y?[pYD1JI(,2WP@sZL9E=9!1g-+Jkmr-Np-dl_GZT-fkQ0UmWrpS.n(["N$F-eD$>l5rkkKcQBkEgULT9
%.N#X(835,U,h@2[A%YP#9d=(4\-ou""EL=m&;1S+VD>aCPd_GB_d,MoZ?-^nh2mCqj(k)]o;K\HNdje1h4QGO'SJpJE+jDFb#XXV
%r/.&kB-j87XS;Ak7^Z7qr'fc3+kqs1!qgc-nF3sd,'[Q'U*?%]eNo!t,Se_b);NL#oS%RS=A1sOWe;dglN@<F@>Uc*OcE5I1MBX/
%=?8t6H%_';<N8&f@oZ:(e50Zu8%AXK;AgT(S;Neq.qbBH;1:O.#'h5%$Gg2o.*BbBAOo9\(Kj0mdDSoLB/VmL6jm,!Z)>',c<YBL
%n-1)>GX)-ICLqK$>#OEj;5YlkcNMC4jI(iloO<9/G?,jjOTc=eQ%McJ`5cmb/gcI#jMK3dXs)kik;<+D1+s0kU[!23=LUF74_(3G
%^_Q7b/d=;lGEK@Mju=!TR2hC0j*Fs69don;5rBIkGZNMldTKd_-OEA\BLg1V),jUVk<T=ffY+4eD]9\ZPqLTJcE7qQg2e(eE*_\C
%a!;qh7SHRo'?^5]8QtJc:k,5/^1T)2X=]TY%uWL3[Y&(,i@2%;S4n;mbkNquA/h>74HE,"!e(uMk1sD#`P-Bb!n[^9Ug3m)$5`-A
%YE&UupW+t>lk6[/nJ>`%0*`=+S.r-QYb?>Xi,R'D":a@;f3bE/2&$OU'YUb$?Ah_7!)B2I:J!s-E4K*R()AH(j0\;!$uk',9=?&[
%9[%i*\t]<1gkF9cg5/*>KOnPN>QjrkM?e?r[JSZA4G'Pb*#]-g_lRF.Gbm57Cf^SW+U8.qRfql^'VlLTmrB>?">h-T(.=[$#ZEad
%GX[E)LJYjSY;8^H4rX1Gq/39unQG%KTT2="FVECH^S0(hp:?V0,nFaPJ=<VpWZ&_A<F`&>2utGV^3Y0Y)0\4U^[3T=81C#&GU)lJ
%Sl7Ick\fU5Ad_@q[6(17^eo*B%2/H4Mir]6cA7T)s-Pc$#1,-OEGd8KLqSB"h9]eh)2jQrEoV+<jA27]+/`i4$#3_"(d,!5`jikf
%0*T0R?;_c_=+/TiJr?k%;4t$o0GJldVlGX[klj&Vcds9[*g1,I.pZk"\Z^7kZrsaM'eX%%3ukdD$96]XYd&)4;t95*r^i@%?i>5R
%-h=_PU_U<)paR7r%r=7Hr[,:C]PuQs0$cT#RQ2W!,_?H;B0<59ka,-MR>1M:S:o'3C6@OYPF&\?WBLq4>ABYZEGLc[RBpei1(0o>
%60p+YX=Ve[a)g;6;jsfHaSGH,,*tjeEZH>9CR/LA.87"8W\[teiACa9$"cYp6Jb-fYd.MdF%][(QBF*l':/qoa[-+JdUD.QDTo-;
%:8&^p@[((IIc<n;eg5/u.QPS;CZ]SL;M5js2H-'U"U\RN17Ot-]sgUn!d[fLB/K^&li>[8Fn@uL$:2+AL:jR>4#>n;*20mRM[C!T
%!Ne/2K'IC#N7CE*Ips;mQf-rojBDYhEmZR%:.j.9$Q3)IURW`pX_)'hT]_U)#okQj@+#E?66i7H3Ia^KiX5_<ESc)3peFhR!G6U#
%T[:mK_tYd'LN1*E%ZZ<BhQ(&5*>Pa?;&&i&do9ACkFSeN+P]'IX8F,]!?`A)>f;Z=P2u3%>0MZi?Bm[)`$h_(=CgCO5T79+7,2un
%6MCWAAuq!ofc)+eoNPkcp+4%+'jQfLr;U(R&$f4uq]4WuP^ALm3O&Vu@,l;CR3+NJQ#te4+dgM<BT.o5[!k=Q&<8&:/sd,<`p.MK
%nT1s,gbFhgEK*NcT$XJY;m`[1-K819cZ_U&?5/06Q6askkU^m^$7J\B1J`fj(IHPQU3_oDeh_#U#6qe[=&G@O!FpJLaH0qq*,SQn
%O=1dBj9M)`ht]N&;S>[CY,JSFbnZJ*jbjm?C:qXr7@e/\VlU2fC;l>&,kGF+&jCDS@?1u`fe,>(D,fHX1CLuX;7oF(^;XYT8VPbl
%&"Ef+nbI.j+'>@+k?=1s("Q_%Q:+c;f8ScdFXl-oA?fe>a;+8ZJ7Y+s@oq<O\?adq:?Z4PWj("sg-fF/1'_&afLXfi(@snr8X&aF
%QlTS`j^*6bf>?eDC<i0gQJW6,KX%iNM2#3r@m7gh\KWJ&I:T`.Z&]Tj@!1VP!O9578de[9QK)Xb868.,=*49o>rOUlbU9"JAC^r,
%%CA$VHKcZNB$o4TW_V&dCcI'/)d0"rAaAJ^:1`.8W%9pg&0WI8Q8o6`$_<eMWA965dVL/Ok//LcT(i,[0[[.r^\Q7QILSPsqZ'k"
%WCCaP"='/&NYMH=F#gX/'T,Rb`UXQK7&-0-WjG=/[:+k?mA^auQkWghLt.]!<$=*(WZ'T33=#(*mkaX3*)nI;Voh"o4l&qn`TAK6
%B$O=(mGN'V+;WZXE_2%!E#%9N$U23FFXR:n]P<SN&*D%ILQRmG%D4CIE^UnAnl`mh?LZ<_'n+WK0HPJT_ZA/iT`P]^j=aBhHr]s3
%SfkDs3R/VN#-Uk(M=OZf_Tjj2R]QsW4RJV3kisd"ls:;=bHPC'#Vi^@,nF<V)1(D*2qi2AAR#?F_Nj]8&]\<Ja$To0H4[eOes!pn
%l/alLO_a&&/YXo_:o[Bi6n",,2Ce6Ij\6,GE8]n9:4,S9eOf%)+knEL6u@7u#Q1mC7mgoT3fG(!*17btd*RR%?+XD5i>(O,pIt,q
%DJP9nK7rVH*lIKQJp3Q:f*^"cK`cT&E`P"Xn$&]jjJrsUD*kDZZBT#_lVj6eB^kC?7[jaQKsb)pi6;$Yf!#aD!f\\oPV-+f4hFcs
%\AOFN'Q21`q&s#T+<%+T@pFsB*XiW4ghc7KJ@UcD&<\c[H2pX\X/?08`40<%Ui7r'-r**qnHR;0Ca^Es):\-dU'D*0<&8$\86S*<
%Lq>4scFH./VU&ODg(IC)JA]9#HR0Z$DjNTd6c2p-(Q0hq3WG.i4+P*Aqu"cirq0V>J,\n4^]!fR!.OjdT7?\/:VZl+DkB8mp;<MO
%q>KJ@52C\eoiJ5l:]EWXFo1:0:VZqM?[qrpqu'n%qHlMWdJVqC+926LJ+pjQrWhAs.Ui~>
%AI9_PrivateDataEnd
